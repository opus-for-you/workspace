{"file_contents":{"replit.md":{"content":"# Opus - Personal and Client Management App\n\n## Overview\n\nOpus is a full-stack productivity application designed for young professionals to manage their personal and professional lives. It provides comprehensive tools for goal tracking, task management, connection management, and weekly reflection. The application features a modern, dark-mode-first interface inspired by Linear and Notion, emphasizing clarity, information density, and efficient workflows.\n\n## User Preferences\n\n- **Communication style**: Simple, everyday language\n- **GitHub commits**: When user says \"run commit\", execute `tsx scripts/commit-to-github.ts` to sync documentation to GitHub\n\n## Recent Changes (October 2025)\n\n### MVP Completion - Version 1.0\n- **Complete Authentication System**: Secure session-based authentication with password hashing, login/register flows, and protected routes\n- **Dashboard**: Overview page with metrics for goals, tasks, and connections\n- **Connections Management**: Full CRUD interface for tracking professional relationships\n- **Goals Tracking**: Create and monitor goals with progress indicators (0-100%) and status tracking\n- **Task Management**: Task organization with priority levels, status updates, and optional goal associations\n- **Weekly Review**: Structured reflection interface for wins, challenges, learnings, and planning\n- **Security Hardening**: \n  - Password hashes sanitized from all API responses using SafeUser type\n  - Input validation on all PATCH endpoints using Zod partial schemas\n  - Production-ready session cookies (httpOnly, sameSite: lax, secure in production)\n  - 7-day session expiry with PostgreSQL session storage\n- **UX Polish**:\n  - Proper navigation and routing with authenticated/unauthenticated flows\n  - Post-login/register redirects to dashboard\n  - Post-logout redirect to auth page\n  - Dark mode as primary theme with light mode support\n\n## System Architecture\n\n### Frontend Architecture\n\n**Core Framework**: React 18 with TypeScript in a single-page application (SPA) architecture using Vite as the build tool.\n\n**Routing Strategy**: Wouter is used as a lightweight alternative to React Router, providing client-side routing with minimal overhead. The application implements protected routes that redirect unauthenticated users to the authentication page.\n\n**State Management**: TanStack Query (React Query v5) handles all server state, providing automatic caching, background refetching, and optimistic updates. No global client state management library is used - component state is managed locally with React hooks.\n\n**UI Component System**: Built on shadcn/ui components, which are customized Radix UI primitives. This provides accessible, unstyled components that are styled with TailwindCSS. The design system follows a \"New York\" style variant with custom color schemes for dark and light modes.\n\n**Form Handling**: React Hook Form manages form state with Zod schemas for runtime validation. This provides type-safe forms with minimal re-renders.\n\n**Design System**: Uses a custom TailwindCSS configuration with CSS variables for theming. The color palette is optimized for dark mode (primary) with light mode support (secondary). Typography uses Inter for UI elements and JetBrains Mono for code/dates/metrics.\n\n### Backend Architecture\n\n**Server Framework**: Express.js with TypeScript, following a RESTful API design pattern.\n\n**Authentication System**: Passport.js with Local Strategy for username/password authentication. Passwords are hashed using Node's built-in scrypt algorithm with salt. Sessions are stored in PostgreSQL using connect-pg-simple for persistence across server restarts.\n\n**Session Management**: Express-session with PostgreSQL session store ensures secure, server-side session management. Sessions are configured with secure cookies and trust proxy settings for deployment environments.\n\n**Database Layer**: Drizzle ORM provides type-safe database queries with PostgreSQL. The ORM schema is defined in TypeScript and shared between frontend and backend for end-to-end type safety.\n\n**Storage Pattern**: A unified `IStorage` interface abstracts all database operations, providing methods for CRUD operations on users, connections, goals, tasks, and weekly reviews. All queries enforce user-based data isolation.\n\n**API Design**: RESTful endpoints under `/api/*` with consistent patterns:\n- Authentication: `/api/register`, `/api/login`, `/api/logout`, `/api/user`\n- Resources: `/api/[resource]` for GET/POST, `/api/[resource]/:id` for PATCH/DELETE\n- All resource endpoints require authentication via middleware\n\n### Data Model\n\n**Schema Design**: Five main entities with PostgreSQL UUID primary keys:\n\n1. **Users**: Basic authentication with username/password\n2. **Connections**: Professional relationships with last contact tracking\n3. **Goals**: Personal/professional objectives with progress tracking (0-100%)\n4. **Tasks**: Actionable items with status (todo/in-progress/done), optional goal association\n5. **Weekly Reviews**: Structured reflection with wins, lessons, and next steps\n\n**Relationships**:\n- All entities belong to a user (one-to-many via `userId` foreign key)\n- Tasks optionally reference goals (many-to-one via `goalId` foreign key with SET NULL on delete)\n- Cascade deletion ensures data cleanup when users are deleted\n\n**Validation**: Zod schemas are generated from Drizzle table definitions using `drizzle-zod`, ensuring consistent validation between database and API layers.\n\n### Development Workflow\n\n**Build Process**: Vite handles frontend bundling with hot module replacement (HMR) in development. Production builds generate optimized static assets served by Express.\n\n**Type Safety**: Shared TypeScript types between frontend and backend via `@shared` path alias. Database schema types are automatically generated by Drizzle ORM.\n\n**Development Server**: Single Express server proxies Vite dev server in development, serves static files in production. Request logging middleware tracks API performance.\n\n**Database Migrations**: Drizzle Kit manages schema migrations with a `db:push` command for development. Migration files are generated in the `/migrations` directory.\n\n## External Dependencies\n\n### Database\n\n**PostgreSQL via Neon Serverless**: Uses `@neondatabase/serverless` for WebSocket-based connection pooling. Configured via `DATABASE_URL` environment variable. The serverless driver is chosen for compatibility with edge deployments and connection pooling optimization.\n\n### UI Libraries\n\n**Radix UI**: Headless, accessible component primitives for dialogs, dropdowns, popovers, tooltips, etc. Provides keyboard navigation, focus management, and ARIA attributes.\n\n**TailwindCSS**: Utility-first CSS framework with custom configuration for design tokens. PostCSS and Autoprefixer handle CSS processing.\n\n### Development Tools\n\n**Replit Integration**: \n- Runtime error overlay plugin for development\n- Cartographer plugin for code navigation\n- Dev banner for Replit-specific features\n- GitHub connector for repository integration (via Octokit)\n\n### Utility Libraries\n\n**date-fns**: Date manipulation and formatting without the bulk of moment.js\n**clsx + tailwind-merge**: Conditional className composition\n**nanoid**: Unique ID generation for client-side operations\n\n### Future Integration Points\n\n**AI Services Placeholder**: `/client/src/lib/ai.ts` contains placeholder functions for future OpenAI/Anthropic integration for:\n- Weekly review reflection prompts\n- Goal recommendations\n- Task prioritization suggestions\n- Connection insights\n\nThese are currently stubbed out and documented in the roadmap for Phase 2 implementation.","size_bytes":7652},"docs/roadmap.md":{"content":"# Opus Product Roadmap\n\n## Current Version: MVP (v1.0)\n\n### ✅ Completed Features\n\n#### Core Functionality\n- [x] User authentication (signup, login, logout)\n- [x] Session-based security with PostgreSQL storage\n- [x] Dashboard with metrics and overview\n- [x] Connection management (CRUD)\n- [x] Goal tracking with progress indicators\n- [x] Task management with kanban/list views\n- [x] Weekly review and reflection system\n- [x] Dark/light theme toggle\n- [x] Responsive mobile-first design\n\n#### Technical Implementation\n- [x] PostgreSQL database with Drizzle ORM\n- [x] RESTful API with Express.js\n- [x] React frontend with TypeScript\n- [x] TanStack Query for state management\n- [x] Form validation with Zod\n- [x] Secure password hashing\n- [x] Protected routes and authorization\n\n## Phase 2: AI Integration (Q2 2024)\n\n### AI-Powered Features\n- [ ] **Weekly Review Prompts**\n  - Generate personalized reflection questions\n  - Analyze patterns in user responses\n  - Suggest areas for improvement\n  - Technology: OpenAI GPT-4 or Anthropic Claude\n\n- [ ] **Goal Recommendations**\n  - Analyze user's current goals and progress\n  - Suggest new goals based on achievements\n  - Recommend goal breakdown strategies\n  - Smart deadline suggestions\n\n- [ ] **Task Prioritization**\n  - AI-powered task sorting based on importance\n  - Consider deadlines, goals, and user patterns\n  - Suggest optimal task scheduling\n  - Workload balancing recommendations\n\n- [ ] **Connection Insights**\n  - Identify relationships needing attention\n  - Suggest conversation starters\n  - Track networking effectiveness\n  - Relationship health scores\n\n### Technical Additions\n- [ ] OpenAI API integration (`client/src/lib/ai.ts`)\n- [ ] Prompt engineering and fine-tuning\n- [ ] Rate limiting for AI calls\n- [ ] Token usage tracking and optimization\n\n## Phase 3: Notifications & Automation (Q3 2024)\n\n### Notification System\n- [ ] **Task Reminders**\n  - Scheduled push notifications using node-cron\n  - Email reminders for upcoming deadlines\n  - SMS notifications (via Twilio integration)\n  - Browser push notifications\n\n- [ ] **Connection Reminders**\n  - Automated follow-up suggestions\n  - Relationship maintenance alerts\n  - Birthday and anniversary reminders\n  - Configurable reminder frequency\n\n- [ ] **Goal Milestones**\n  - Progress milestone notifications\n  - Celebration messages for achievements\n  - Warning alerts for off-track goals\n\n### Automation Features\n- [ ] Recurring task creation\n- [ ] Automated weekly review scheduling\n- [ ] Smart inbox for task suggestions\n- [ ] Auto-categorization of connections\n\n### Technical Implementation\n- [ ] node-cron for scheduled jobs\n- [ ] Email service integration (SendGrid)\n- [ ] SMS service integration (Twilio)\n- [ ] Web Push API implementation\n- [ ] Background job queue\n\n## Phase 4: Analytics & Insights (Q4 2024)\n\n### Analytics Dashboard\n- [ ] **Productivity Metrics**\n  - Task completion rates over time\n  - Goal achievement tracking\n  - Time-to-completion analytics\n  - Productivity trends and patterns\n\n- [ ] **Connection Analytics**\n  - Network growth visualization\n  - Relationship strength metrics\n  - Interaction frequency heatmaps\n  - Professional network health score\n\n- [ ] **Goal Analytics**\n  - Success rate by goal type\n  - Average time to goal completion\n  - Goal difficulty analysis\n  - Correlation between tasks and goal progress\n\n### Visualization Tools\n- [ ] Interactive charts with Recharts\n- [ ] Customizable dashboards\n- [ ] Export reports (PDF, CSV)\n- [ ] Share progress with accountability partners\n\n### Technical Additions\n- [ ] Advanced Recharts configurations\n- [ ] Data aggregation queries\n- [ ] Report generation service\n- [ ] Chart customization options\n\n## Phase 5: Collaboration Features (Q1 2025)\n\n### Team & Sharing\n- [ ] **Shared Goals**\n  - Collaborate on goals with team members\n  - Joint progress tracking\n  - Shared task delegation\n  - Team achievement celebrations\n\n- [ ] **Accountability Partners**\n  - Connect with accountability buddies\n  - Share progress updates\n  - Mutual encouragement system\n  - Private goal sharing\n\n- [ ] **Team Workspaces**\n  - Organization-wide goal tracking\n  - Team task boards\n  - Collaborative weekly reviews\n  - Team analytics and insights\n\n### Social Features\n- [ ] Public profile pages (optional)\n- [ ] Achievement badges and gamification\n- [ ] Community challenges\n- [ ] Success story sharing\n\n### Technical Implementation\n- [ ] Real-time collaboration with WebSockets\n- [ ] Permissions and role management\n- [ ] Team data isolation\n- [ ] Activity feed system\n\n## Phase 6: Mobile Applications (Q2 2025)\n\n### Native Mobile Apps\n- [ ] **iOS App**\n  - React Native implementation\n  - Offline-first architecture\n  - Push notifications\n  - Biometric authentication\n\n- [ ] **Android App**\n  - React Native implementation\n  - Material Design 3\n  - Widget support\n  - Quick actions\n\n### Cross-Platform Features\n- [ ] Offline mode with sync\n- [ ] Mobile-optimized UI\n- [ ] Quick task capture\n- [ ] Voice input support\n\n### Technical Stack\n- [ ] React Native\n- [ ] AsyncStorage for offline data\n- [ ] Push notification services\n- [ ] Biometric SDK integration\n\n## Phase 7: Advanced Integrations (Q3 2025)\n\n### Third-Party Integrations\n- [ ] **Calendar Integration**\n  - Google Calendar sync\n  - Outlook Calendar sync\n  - Apple Calendar support\n  - Two-way task synchronization\n\n- [ ] **Communication Tools**\n  - Slack integration\n  - Microsoft Teams integration\n  - Email client integration\n  - LinkedIn connection import\n\n- [ ] **Project Management**\n  - Jira integration\n  - Asana sync\n  - Trello board import\n  - GitHub project integration\n\n- [ ] **CRM Integration**\n  - Salesforce connector\n  - HubSpot sync\n  - Custom CRM webhooks\n\n### Data Import/Export\n- [ ] CSV import/export\n- [ ] JSON data backup\n- [ ] API access for developers\n- [ ] Webhook support\n\n### Technical Implementation\n- [ ] OAuth 2.0 for third-party auth\n- [ ] API integration framework\n- [ ] Webhook event system\n- [ ] Data transformation pipelines\n\n## Future Considerations\n\n### Premium Features\n- [ ] Advanced AI features (premium tier)\n- [ ] Unlimited storage\n- [ ] Priority support\n- [ ] Custom branding for teams\n- [ ] Advanced analytics\n\n### Enterprise Features\n- [ ] SSO integration (SAML, OAuth)\n- [ ] Admin dashboard\n- [ ] Audit logs\n- [ ] Compliance certifications\n- [ ] On-premise deployment option\n\n### Experimental Features\n- [ ] AR/VR goal visualization\n- [ ] Voice-first interface\n- [ ] Mood tracking integration\n- [ ] Health and fitness goal sync\n- [ ] Financial goal integration\n\n## Release Schedule\n\n| Phase | Target Release | Focus Area |\n|-------|---------------|------------|\n| MVP (v1.0) | Current | Core functionality |\n| Phase 2 | Q2 2024 | AI Integration |\n| Phase 3 | Q3 2024 | Notifications & Automation |\n| Phase 4 | Q4 2024 | Analytics & Insights |\n| Phase 5 | Q1 2025 | Collaboration |\n| Phase 6 | Q2 2025 | Mobile Apps |\n| Phase 7 | Q3 2025 | Integrations |\n\n## How to Contribute\n\nWe welcome contributions to help achieve these roadmap goals:\n\n1. **Feature Requests**: Submit ideas via GitHub Issues\n2. **Code Contributions**: Fork the repo and submit PRs\n3. **Bug Reports**: Help us identify and fix issues\n4. **Documentation**: Improve guides and tutorials\n5. **Testing**: Help test new features in beta\n\n## Feedback\n\nHave suggestions for the roadmap? We'd love to hear from you:\n- GitHub Issues: Feature requests and discussions\n- Email: feedback@opus-app.com\n- Community Forum: Join the conversation\n\n---\n\n*This roadmap is subject to change based on user feedback and market needs.*\n","size_bytes":7575},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/weekly-review-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { PenLine, Plus, Calendar, Trash2 } from \"lucide-react\";\nimport { format, parseISO, startOfWeek } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { WeeklyReview, InsertWeeklyReview } from \"@shared/schema\";\n\nexport default function WeeklyReviewPage() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [formData, setFormData] = useState<InsertWeeklyReview>({\n    weekStart: format(startOfWeek(new Date()), \"yyyy-MM-dd\"),\n    summary: \"\",\n    wins: \"\",\n    lessons: \"\",\n    nextSteps: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const { data: reviews = [], isLoading } = useQuery<WeeklyReview[]>({\n    queryKey: [\"/api/reviews\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertWeeklyReview) => {\n      const res = await apiRequest(\"POST\", \"/api/reviews\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({ title: \"Weekly review created successfully\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/reviews/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/reviews\"] });\n      toast({ title: \"Review deleted successfully\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      weekStart: format(startOfWeek(new Date()), \"yyyy-MM-dd\"),\n      summary: \"\",\n      wins: \"\",\n      lessons: \"\",\n      nextSteps: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createMutation.mutate(formData);\n  };\n\n  const sortedReviews = [...reviews].sort((a, b) => \n    new Date(b.weekStart).getTime() - new Date(a.weekStart).getTime()\n  );\n\n  return (\n    <div className=\"space-y-6 max-w-4xl\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight mb-2\" data-testid=\"text-reviews-title\">\n            Weekly Reviews\n          </h1>\n          <p className=\"text-muted-foreground\">Reflect on your progress and plan ahead</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-review\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              New Review\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create Weekly Review</DialogTitle>\n              <DialogDescription>Reflect on your week and plan for the next</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"weekStart\">Week Starting *</Label>\n                <Input\n                  id=\"weekStart\"\n                  data-testid=\"input-review-week-start\"\n                  type=\"date\"\n                  value={formData.weekStart}\n                  onChange={(e) => setFormData({ ...formData, weekStart: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"summary\">Weekly Summary</Label>\n                <Textarea\n                  id=\"summary\"\n                  data-testid=\"input-review-summary\"\n                  value={formData.summary}\n                  onChange={(e) => setFormData({ ...formData, summary: e.target.value })}\n                  placeholder=\"How was your week overall?\"\n                  rows={4}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"wins\">Wins & Achievements</Label>\n                <Textarea\n                  id=\"wins\"\n                  data-testid=\"input-review-wins\"\n                  value={formData.wins}\n                  onChange={(e) => setFormData({ ...formData, wins: e.target.value })}\n                  placeholder=\"What went well this week?\"\n                  rows={4}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lessons\">Lessons Learned</Label>\n                <Textarea\n                  id=\"lessons\"\n                  data-testid=\"input-review-lessons\"\n                  value={formData.lessons}\n                  onChange={(e) => setFormData({ ...formData, lessons: e.target.value })}\n                  placeholder=\"What did you learn?\"\n                  rows={4}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"nextSteps\">Next Week's Focus</Label>\n                <Textarea\n                  id=\"nextSteps\"\n                  data-testid=\"input-review-next-steps\"\n                  value={formData.nextSteps}\n                  onChange={(e) => setFormData({ ...formData, nextSteps: e.target.value })}\n                  placeholder=\"What will you focus on next week?\"\n                  rows={4}\n                />\n              </div>\n              <DialogFooter>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-review\"\n                >\n                  Create Review\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Reviews Timeline */}\n      {isLoading ? (\n        <div className=\"text-center py-12 text-muted-foreground\">Loading reviews...</div>\n      ) : reviews.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <PenLine className=\"h-16 w-16 text-muted-foreground mb-4 opacity-50\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No reviews yet</h3>\n            <p className=\"text-muted-foreground mb-4\">Start your weekly reflection practice</p>\n            <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-first-review\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Your First Review\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-4\">\n          {sortedReviews.map((review, index) => (\n            <Card key={review.id} className=\"hover-elevate\" data-testid={`review-card-${review.id}`}>\n              <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Calendar className=\"h-5 w-5\" />\n                    Week of {format(parseISO(review.weekStart), \"MMM d, yyyy\")}\n                  </CardTitle>\n                  {index === 0 && (\n                    <CardDescription className=\"mt-1\">Most recent review</CardDescription>\n                  )}\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => deleteMutation.mutate(review.id)}\n                  data-testid={`button-delete-review-${review.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4\" />\n                </Button>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {review.summary && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2 text-sm text-muted-foreground uppercase tracking-wide\">\n                      Summary\n                    </h3>\n                    <p className=\"text-sm whitespace-pre-wrap\">{review.summary}</p>\n                  </div>\n                )}\n                {review.wins && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2 text-sm text-muted-foreground uppercase tracking-wide\">\n                      Wins & Achievements\n                    </h3>\n                    <p className=\"text-sm whitespace-pre-wrap\">{review.wins}</p>\n                  </div>\n                )}\n                {review.lessons && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2 text-sm text-muted-foreground uppercase tracking-wide\">\n                      Lessons Learned\n                    </h3>\n                    <p className=\"text-sm whitespace-pre-wrap\">{review.lessons}</p>\n                  </div>\n                )}\n                {review.nextSteps && (\n                  <div>\n                    <h3 className=\"font-semibold mb-2 text-sm text-muted-foreground uppercase tracking-wide\">\n                      Next Week's Focus\n                    </h3>\n                    <p className=\"text-sm whitespace-pre-wrap\">{review.nextSteps}</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* AI Placeholder Note */}\n      <Card className=\"bg-muted/50\">\n        <CardContent className=\"pt-6\">\n          <p className=\"text-sm text-muted-foreground text-center\">\n            <span className=\"font-semibold\">Coming Soon:</span> AI-powered reflection prompts will help you get the most out of your weekly reviews.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":10088},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"server/storage.ts":{"content":"// Reference: javascript_auth_all_persistance and javascript_database blueprints\nimport { \n  users, \n  connections, \n  goals, \n  tasks, \n  weeklyReviews,\n  type User, \n  type InsertUser,\n  type Connection,\n  type InsertConnection,\n  type Goal,\n  type InsertGoal,\n  type Task,\n  type InsertTask,\n  type WeeklyReview,\n  type InsertWeeklyReview\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { pool } from \"./db\";\nimport { eq, and } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Connection operations\n  getConnections(userId: string): Promise<Connection[]>;\n  getConnection(id: string, userId: string): Promise<Connection | undefined>;\n  createConnection(userId: string, connection: InsertConnection): Promise<Connection>;\n  updateConnection(id: string, userId: string, connection: Partial<InsertConnection>): Promise<Connection | undefined>;\n  deleteConnection(id: string, userId: string): Promise<boolean>;\n  \n  // Goal operations\n  getGoals(userId: string): Promise<Goal[]>;\n  getGoal(id: string, userId: string): Promise<Goal | undefined>;\n  createGoal(userId: string, goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, userId: string, goal: Partial<InsertGoal>): Promise<Goal | undefined>;\n  deleteGoal(id: string, userId: string): Promise<boolean>;\n  \n  // Task operations\n  getTasks(userId: string): Promise<Task[]>;\n  getTask(id: string, userId: string): Promise<Task | undefined>;\n  createTask(userId: string, task: InsertTask): Promise<Task>;\n  updateTask(id: string, userId: string, task: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string, userId: string): Promise<boolean>;\n  \n  // Weekly Review operations\n  getWeeklyReviews(userId: string): Promise<WeeklyReview[]>;\n  getWeeklyReview(id: string, userId: string): Promise<WeeklyReview | undefined>;\n  createWeeklyReview(userId: string, review: InsertWeeklyReview): Promise<WeeklyReview>;\n  deleteWeeklyReview(id: string, userId: string): Promise<boolean>;\n  \n  sessionStore: session.SessionStore;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.SessionStore;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ pool, createTableIfMissing: true });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  // Connection operations\n  async getConnections(userId: string): Promise<Connection[]> {\n    return await db.select().from(connections).where(eq(connections.userId, userId));\n  }\n\n  async getConnection(id: string, userId: string): Promise<Connection | undefined> {\n    const [connection] = await db\n      .select()\n      .from(connections)\n      .where(and(eq(connections.id, id), eq(connections.userId, userId)));\n    return connection || undefined;\n  }\n\n  async createConnection(userId: string, connection: InsertConnection): Promise<Connection> {\n    const [newConnection] = await db\n      .insert(connections)\n      .values({ ...connection, userId })\n      .returning();\n    return newConnection;\n  }\n\n  async updateConnection(id: string, userId: string, connection: Partial<InsertConnection>): Promise<Connection | undefined> {\n    const [updated] = await db\n      .update(connections)\n      .set(connection)\n      .where(and(eq(connections.id, id), eq(connections.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteConnection(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(connections)\n      .where(and(eq(connections.id, id), eq(connections.userId, userId)));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Goal operations\n  async getGoals(userId: string): Promise<Goal[]> {\n    return await db.select().from(goals).where(eq(goals.userId, userId));\n  }\n\n  async getGoal(id: string, userId: string): Promise<Goal | undefined> {\n    const [goal] = await db\n      .select()\n      .from(goals)\n      .where(and(eq(goals.id, id), eq(goals.userId, userId)));\n    return goal || undefined;\n  }\n\n  async createGoal(userId: string, goal: InsertGoal): Promise<Goal> {\n    const [newGoal] = await db\n      .insert(goals)\n      .values({ ...goal, userId })\n      .returning();\n    return newGoal;\n  }\n\n  async updateGoal(id: string, userId: string, goal: Partial<InsertGoal>): Promise<Goal | undefined> {\n    const [updated] = await db\n      .update(goals)\n      .set(goal)\n      .where(and(eq(goals.id, id), eq(goals.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteGoal(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(goals)\n      .where(and(eq(goals.id, id), eq(goals.userId, userId)));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Task operations\n  async getTasks(userId: string): Promise<Task[]> {\n    return await db.select().from(tasks).where(eq(tasks.userId, userId));\n  }\n\n  async getTask(id: string, userId: string): Promise<Task | undefined> {\n    const [task] = await db\n      .select()\n      .from(tasks)\n      .where(and(eq(tasks.id, id), eq(tasks.userId, userId)));\n    return task || undefined;\n  }\n\n  async createTask(userId: string, task: InsertTask): Promise<Task> {\n    const [newTask] = await db\n      .insert(tasks)\n      .values({ ...task, userId })\n      .returning();\n    return newTask;\n  }\n\n  async updateTask(id: string, userId: string, task: Partial<InsertTask>): Promise<Task | undefined> {\n    const [updated] = await db\n      .update(tasks)\n      .set(task)\n      .where(and(eq(tasks.id, id), eq(tasks.userId, userId)))\n      .returning();\n    return updated || undefined;\n  }\n\n  async deleteTask(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(tasks)\n      .where(and(eq(tasks.id, id), eq(tasks.userId, userId)));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n\n  // Weekly Review operations\n  async getWeeklyReviews(userId: string): Promise<WeeklyReview[]> {\n    return await db.select().from(weeklyReviews).where(eq(weeklyReviews.userId, userId));\n  }\n\n  async getWeeklyReview(id: string, userId: string): Promise<WeeklyReview | undefined> {\n    const [review] = await db\n      .select()\n      .from(weeklyReviews)\n      .where(and(eq(weeklyReviews.id, id), eq(weeklyReviews.userId, userId)));\n    return review || undefined;\n  }\n\n  async createWeeklyReview(userId: string, review: InsertWeeklyReview): Promise<WeeklyReview> {\n    const [newReview] = await db\n      .insert(weeklyReviews)\n      .values({ ...review, userId })\n      .returning();\n    return newReview;\n  }\n\n  async deleteWeeklyReview(id: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(weeklyReviews)\n      .where(and(eq(weeklyReviews.id, id), eq(weeklyReviews.userId, userId)));\n    return result.rowCount !== null && result.rowCount > 0;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7690},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, Target, Users, CheckSquare, PenLine } from \"lucide-react\";\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [, setLocation] = useLocation();\n  const [loginData, setLoginData] = useState({ username: \"\", password: \"\" });\n  const [registerData, setRegisterData] = useState({ username: \"\", password: \"\" });\n\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate(loginData, {\n      onSuccess: () => setLocation(\"/\")\n    });\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    registerMutation.mutate(registerData, {\n      onSuccess: () => setLocation(\"/\")\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen grid md:grid-cols-2\">\n      {/* Left Column - Form */}\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold tracking-tight mb-2\">Welcome to Opus</h1>\n            <p className=\"text-muted-foreground\">Your personal productivity command center</p>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">Login</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">Register</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Sign In</CardTitle>\n                  <CardDescription>Enter your credentials to access your account</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleLogin} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">Username</Label>\n                      <Input\n                        id=\"login-username\"\n                        data-testid=\"input-login-username\"\n                        type=\"text\"\n                        value={loginData.username}\n                        onChange={(e) => setLoginData({ ...loginData, username: e.target.value })}\n                        required\n                        autoComplete=\"username\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">Password</Label>\n                      <Input\n                        id=\"login-password\"\n                        data-testid=\"input-login-password\"\n                        type=\"password\"\n                        value={loginData.password}\n                        onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}\n                        required\n                        autoComplete=\"current-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Signing in...\n                        </>\n                      ) : (\n                        \"Sign In\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Create Account</CardTitle>\n                  <CardDescription>Get started with Opus today</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleRegister} className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">Username</Label>\n                      <Input\n                        id=\"register-username\"\n                        data-testid=\"input-register-username\"\n                        type=\"text\"\n                        value={registerData.username}\n                        onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}\n                        required\n                        autoComplete=\"username\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">Password</Label>\n                      <Input\n                        id=\"register-password\"\n                        data-testid=\"input-register-password\"\n                        type=\"password\"\n                        value={registerData.password}\n                        onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}\n                        required\n                        autoComplete=\"new-password\"\n                      />\n                    </div>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Creating account...\n                        </>\n                      ) : (\n                        \"Create Account\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right Column - Hero Section */}\n      <div className=\"hidden md:flex items-center justify-center bg-primary p-12\">\n        <div className=\"max-w-lg text-primary-foreground\">\n          <h2 className=\"text-4xl font-bold mb-6 tracking-tight\">\n            Manage Your Professional Life with Clarity\n          </h2>\n          <p className=\"text-lg mb-8 text-primary-foreground/90\">\n            Opus helps young professionals stay organized, build meaningful connections, \n            and achieve their goals with powerful tools for task management, goal tracking, \n            and weekly reflection.\n          </p>\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-2 bg-primary-foreground/10 rounded-lg\">\n                <Target className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Goal Tracking</h3>\n                <p className=\"text-sm text-primary-foreground/80\">Monitor progress on your ambitions</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-2 bg-primary-foreground/10 rounded-lg\">\n                <CheckSquare className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Task Management</h3>\n                <p className=\"text-sm text-primary-foreground/80\">Stay on top of your to-dos</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-2 bg-primary-foreground/10 rounded-lg\">\n                <Users className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Connections</h3>\n                <p className=\"text-sm text-primary-foreground/80\">Nurture professional relationships</p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <div className=\"p-2 bg-primary-foreground/10 rounded-lg\">\n                <PenLine className=\"h-5 w-5\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold mb-1\">Weekly Reviews</h3>\n                <p className=\"text-sm text-primary-foreground/80\">Reflect and plan ahead</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8904},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"server/github.ts":{"content":"// Reference: github blueprint\nimport { Octokit } from '@octokit/rest'\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n","size_bytes":1541},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"design_guidelines.md":{"content":"# Opus Design Guidelines - Editorial System\n\n## Design Approach: Magazine Editorial Aesthetic\n\n**Selected Approach**: Editorial Typography-First Design  \n**Justification**: Opus serves young professionals who appreciate refined, magazine-quality interfaces. The editorial approach emphasizes thoughtful content hierarchy through typography, generous whitespace, and minimal visual elements. This creates a calm, focused environment for reflection and planning.\n\n**Core Principles**:\n- Typography drives hierarchy and visual interest\n- Minimal borders (primarily bottom borders for section separation)\n- Generous whitespace and breathing room\n- Serif display fonts for editorial impact\n- Monospace numerals for metrics and data\n- Light, clean backgrounds (ivory/white)\n- Hover interactions through subtle border color changes\n\n---\n\n## Color Palette\n\n### Editorial Light Mode (Primary)\n\n**Neutrals** (HSL format for Tailwind):\n- **Ink**: 0 0% 4% (#0A0A0A - darkest text)\n- **Charcoal**: 0 0% 11% (#1C1C1C - primary text, dark elements)\n- **Graphite**: 0 0% 31% (#505050 - secondary text)\n- **Stone**: 0 0% 54% (#8A8A8A - tertiary text, labels)\n- **Fog**: 0 0% 72% (#B8B8B8 - subtle text)\n- **Pearl**: 0 0% 91% (#E8E8E8 - borders, dividers)\n- **Alabaster**: 0 0% 96% (#F4F4F4 - subtle backgrounds)\n- **Ivory**: 0 0% 98% (#FAFAFA - main background)\n- **Pure**: 0 0% 100% (#FFFFFF - cards, elevated surfaces)\n\n**Accent Colors**:\n- **Forest**: 156 44% 20% (#1B4332 - success, growth)\n- **Sage**: 171 22% 39% (#52796F - calm actions)\n- **Rust**: 4 42% 46% (#A84843 - warnings, attention)\n- **Sand**: 35 48% 64% (#D4A574 - warm highlights)\n- **Ocean**: 208 50% 35% (#2C5282 - primary actions, links)\n\n### Dark Mode (Optional)\nUses inverted neutral scale with same accent colors for consistency.\n\n---\n\n## Typography\n\n### Font Families\n\n**Display/Editorial** (Google Fonts):\n- **Fraunces** - Serif display font for headlines, hero text, large numbers\n- Fallback: 'Libre Baskerville', Georgia, serif\n- Usage: Page titles, section headers, metric displays, quotes\n\n**Body/Interface** (System fonts):\n- **Inter** - Sans-serif for all UI text, forms, content\n- Fallback: -apple-system, BlinkMacSystemFont, sans-serif\n- Usage: Paragraphs, buttons, labels, navigation\n\n**Monospace/Data** (Developer fonts):\n- **JetBrains Mono** - For numbers, dates, code, metrics\n- Fallback: 'SF Mono', Monaco, monospace\n- Usage: Dates, priorities, percentages, data points\n\n### Typography Scale\n\n**Headlines** (Fraunces serif):\n- Hero/Onboarding: `clamp(2.5rem, 8vw, 4.5rem)` font-light tracking-tighter\n- Dashboard Title: `clamp(2rem, 5vw, 3.5rem)` font-light tracking-tight\n- Section Headers: text-2xl md:text-3xl font-light\n\n**Body Text** (Inter):\n- Primary: text-base md:text-lg leading-relaxed\n- Secondary: text-sm md:text-base text-graphite\n- Labels/Meta: text-xs tracking-widest uppercase text-stone\n\n**Data/Numbers** (JetBrains Mono):\n- Large Metrics: text-4xl md:text-5xl font-light\n- Priorities: text-xl md:text-2xl font-extralight text-fog\n- Dates/Times: text-sm text-stone\n\n### Letter Spacing\n- Uppercase labels: tracking-[0.08em]\n- Headlines: tracking-tight (-0.02em)\n- Navigation: tracking-[0.02em]\n- Body text: tracking-normal\n\n---\n\n## Layout System\n\n### Spacing Philosophy\n**Editorial breathing room** - More generous than typical productivity apps:\n- Small: 1rem (p-4, gap-4) - between list items\n- Medium: 1.5rem (p-6, gap-6) - card padding\n- Large: 4rem (p-16, gap-16) - section spacing\n- Extra: 6rem (p-24) - hero/onboarding spacing\n\n### Container Strategy\n- **Editorial Content**: max-w-3xl (forms, onboarding, reflection)\n- **Dashboard Grid**: max-w-7xl with editorial 2:1 column ratio\n- **Full Width**: Main content areas with px-8 md:px-16 horizontal padding\n\n### Grid Patterns\n- **Dashboard**: grid-cols-1 lg:grid-cols-3 gap-16 (2/3 + 1/3 split)\n- **Lists**: Single column, full width with bottom borders\n- **Metrics Grid**: grid-cols-1 md:grid-cols-2 gap-12\n- **Cards**: Minimal, mostly replaced by bottom-bordered sections\n\n---\n\n## Component Library\n\n### Navigation (Minimal Top Bar)\n- **Structure**: Horizontal flex with logo + nav links + menu\n- **Styling**: \n  - Border bottom: 1px solid pearl\n  - Logo: Fraunces font-light text-2xl text-charcoal\n  - Links: Inter text-sm tracking-[0.02em]\n  - Active: text-charcoal (not stone)\n  - Hover: color transition to charcoal\n- **No background color** - transparent over ivory\n\n### Section Headers\n- **Style**: Bottom border (1px solid pearl) with pb-4\n- **Typography**: text-sm tracking-widest uppercase text-charcoal\n- **Optional**: Flex justify-between with metadata (date/count) in stone\n\n### Content Lists\n- **Items**: \n  - Bottom border divider (1px solid pearl) with pb-6\n  - Hover: border color transitions to charcoal\n  - No background changes\n  - Flex layout with mono priority numbers + content\n- **Numbers**: JetBrains Mono text-2xl text-fog font-extralight\n- **Spacing**: space-y-6 between items\n\n### Forms & Inputs\n- **Text Inputs**: \n  - Transparent background\n  - Bottom border only (1px solid fog)\n  - Focus: border-charcoal transition\n  - No rounded corners or heavy backgrounds\n  - text-lg leading-relaxed\n  - Placeholder: \"...\" (minimal)\n\n### Buttons\n- **Primary**: \n  - bg-charcoal text-pure\n  - px-6 py-3\n  - text-xs tracking-widest uppercase\n  - Hover: inverts to bg-pure text-charcoal with 1px border\n- **Secondary**: \n  - Transparent with text-stone\n  - Hover: text-charcoal transition\n  - Often just text links with arrow icons\n\n### Cards/Elevated Surfaces\n- **Sidebar Cards**:\n  - bg-pure (white on ivory background)\n  - border: 1px solid pearl\n  - Padding: p-6\n  - No rounded corners or minimal rounding\n- **Replace heavy cards with bottom-bordered sections** in main content\n\n### Progress Indicators\n- **Linear Progress**:\n  - 1px height background in pearl\n  - Fill in charcoal\n  - No rounded ends\n  - Used for onboarding steps, goal progress\n\n### Metrics Display\n- **Large Numbers**: Fraunces text-5xl font-light text-charcoal\n- **Unit Labels**: text-xs tracking-widest text-stone\n- **Context**: text-sm text-graphite below metric\n\n---\n\n## Page-Specific Designs\n\n### Onboarding (Editorial Full Screen)\n- **Layout**: Centered content, max-w-3xl\n- **Progress**: 1px line indicator at top\n- **Question**: Fraunces hero size with category label above\n- **Input**: Transparent textarea with bottom border only\n- **Navigation**: Minimal BACK/CONTINUE buttons at bottom\n- **Step Counter**: Centered at page bottom\n\n### Dashboard (Editorial Grid)\n- **Hero Section**: \n  - Label: \"YOUR NORTH STAR\" in stone\n  - Statement: Fraunces large text in charcoal (max-w-900px)\n- **Content**: 2/3 main + 1/3 sidebar split\n- **Main Column**: \n  - \"THIS WEEK\" section with dated tasks\n  - \"CURRENT CHAPTER\" metrics grid\n- **Sidebar**: \n  - Reflection prompt card\n  - Energy patterns\n  - Upcoming items list\n\n### Connections Page\n- **View**: Editorial list with bottom borders\n- **Items**: Name (large) + relationship + last contact\n- **Metadata**: text-sm text-stone with bullet separators\n\n### Tasks & Goals\n- **List View**: Priority number + title + metadata\n- **Typography hierarchy**: Large serif titles, mono priorities\n- **Hover**: Border darkening, no background changes\n\n### Weekly Review\n- **Layout**: Centered, max-w-3xl\n- **Sections**: Bottom-bordered with uppercase labels\n- **Inputs**: Minimal textarea with bottom borders\n- **Historical**: Timeline with subtle left border indicators\n\n---\n\n## Interactions & Animations\n\n**Minimal & Intentional**:\n- Border color transitions: duration-200 (fog → charcoal on hover)\n- Text color transitions: duration-200 (stone → charcoal on hover)\n- Button inversion: background/color swap on hover\n- Arrow icons: translate-x-1 on hover\n- NO background color changes on cards\n- NO elevation/shadow changes\n- NO complex animations\n\n### Hover States\n- **List Items**: Border bottom darkens (pearl → charcoal)\n- **Navigation Links**: Text color darkens (stone → charcoal)\n- **Buttons**: Invert colors with border\n- **Icons**: Slight translation (1-2px)\n\n---\n\n## Responsive Behavior\n\n- **Breakpoints**: Mobile-first (base → md:768px → lg:1024px)\n- **Typography**: clamp() for fluid scaling\n- **Padding**: px-8 on mobile → px-16 on desktop\n- **Grid**: Single column on mobile, editorial splits on desktop\n- **Navigation**: Same minimal bar, menu button for mobile\n\n---\n\n## Brand Voice Through Design\n\nThe editorial design communicates:\n- **Thoughtfulness** - Through generous whitespace and typography\n- **Clarity** - Through minimal borders and clean hierarchy  \n- **Sophistication** - Through serif fonts and magazine layouts\n- **Focus** - Through light backgrounds and calm colors\n- **Professionalism** - Through editorial polish and restraint\n\nThis creates a productivity tool that feels like reading a well-designed magazine - calm, focused, and intentionally crafted for deep work and reflection.\n","size_bytes":8910},"client/src/lib/protected-route.tsx":{"content":"// Reference: javascript_auth_all_persistance blueprint\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" data-testid=\"loading-spinner\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":792},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/lib/ai.ts":{"content":"// AI Integration Placeholder\n// This will be used for OpenAI/Anthropic integration in future phases\n\nexport async function generateReflectionPrompt(userData: any) {\n  // Placeholder for AI-powered reflection prompts\n  // Future implementation will call OpenAI or Anthropic API\n  return \"AI reflection placeholder - Coming soon!\";\n}\n\nexport async function suggestGoals(userData: any) {\n  // Placeholder for AI-powered goal suggestions\n  return [];\n}\n\nexport async function prioritizeTasks(tasks: any[]) {\n  // Placeholder for AI-powered task prioritization\n  return tasks;\n}\n","size_bytes":575},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"server/db.ts":{"content":"// Reference: javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":527},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1604},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/tasks-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { CheckSquare, Plus, Calendar, Pencil, Trash2, Kanban, List as ListIcon } from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Task, InsertTask, Goal } from \"@shared/schema\";\n\nexport default function TasksPage() {\n  const [viewMode, setViewMode] = useState<\"list\" | \"kanban\">(\"list\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const [formData, setFormData] = useState<InsertTask>({\n    title: \"\",\n    description: \"\",\n    dueDate: null,\n    goalId: null,\n    status: \"todo\",\n  });\n\n  const { toast } = useToast();\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: goals = [] } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertTask) => {\n      const res = await apiRequest(\"POST\", \"/api/tasks\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({ title: \"Task created successfully\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertTask> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/tasks/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      setEditingTask(null);\n      resetForm();\n      toast({ title: \"Task updated successfully\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/tasks/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task deleted successfully\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      dueDate: null,\n      goalId: null,\n      status: \"todo\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingTask) {\n      updateMutation.mutate({ id: editingTask.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const openEdit = (task: Task) => {\n    setEditingTask(task);\n    setFormData({\n      title: task.title,\n      description: task.description || \"\",\n      dueDate: task.dueDate,\n      goalId: task.goalId,\n      status: task.status,\n    });\n  };\n\n  const toggleTaskStatus = (task: Task) => {\n    const newStatus = task.status === \"done\" ? \"todo\" : \"done\";\n    updateMutation.mutate({ id: task.id, data: { status: newStatus } });\n  };\n\n  const todoTasks = tasks.filter(t => t.status === \"todo\");\n  const inProgressTasks = tasks.filter(t => t.status === \"in-progress\");\n  const doneTasks = tasks.filter(t => t.status === \"done\");\n\n  const getGoalTitle = (goalId: string | null) => {\n    if (!goalId) return null;\n    const goal = goals.find(g => g.id === goalId);\n    return goal?.title;\n  };\n\n  const TaskCard = ({ task }: { task: Task }) => (\n    <div\n      className=\"p-3 border rounded-lg hover-elevate space-y-2\"\n      data-testid={`task-card-${task.id}`}\n    >\n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex items-start gap-3 flex-1 min-w-0\">\n          <Checkbox\n            checked={task.status === \"done\"}\n            onCheckedChange={() => toggleTaskStatus(task)}\n            data-testid={`checkbox-task-${task.id}`}\n            className=\"mt-1\"\n          />\n          <div className=\"flex-1 min-w-0\">\n            <p className={`font-medium truncate ${task.status === \"done\" ? \"line-through text-muted-foreground\" : \"\"}`}>\n              {task.title}\n            </p>\n            {task.description && (\n              <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">{task.description}</p>\n            )}\n          </div>\n        </div>\n        <div className=\"flex gap-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => openEdit(task)}\n            data-testid={`button-edit-task-${task.id}`}\n          >\n            <Pencil className=\"h-3 w-3\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => deleteMutation.mutate(task.id)}\n            data-testid={`button-delete-task-${task.id}`}\n          >\n            <Trash2 className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n      <div className=\"flex items-center gap-2 flex-wrap\">\n        {task.dueDate && (\n          <Badge variant=\"outline\" className=\"text-xs\">\n            <Calendar className=\"h-3 w-3 mr-1\" />\n            {format(parseISO(task.dueDate), \"MMM d\")}\n          </Badge>\n        )}\n        {task.goalId && getGoalTitle(task.goalId) && (\n          <Badge variant=\"secondary\" className=\"text-xs truncate max-w-[150px]\">\n            {getGoalTitle(task.goalId)}\n          </Badge>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight mb-2\" data-testid=\"text-tasks-title\">\n            Tasks\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your to-do list and stay productive</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-1 p-1 bg-muted rounded-lg\">\n            <Button\n              variant={viewMode === \"list\" ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"list\")}\n              data-testid=\"button-view-list\"\n            >\n              <ListIcon className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={viewMode === \"kanban\" ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"kanban\")}\n              data-testid=\"button-view-kanban\"\n            >\n              <Kanban className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-task\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Task\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Create New Task</DialogTitle>\n                <DialogDescription>Add a task to your to-do list</DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\">Title *</Label>\n                  <Input\n                    id=\"title\"\n                    data-testid=\"input-task-title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    placeholder=\"e.g., Review project proposal\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    data-testid=\"input-task-description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    placeholder=\"Add details...\"\n                    rows={3}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dueDate\">Due Date</Label>\n                  <Input\n                    id=\"dueDate\"\n                    data-testid=\"input-task-due-date\"\n                    type=\"date\"\n                    value={formData.dueDate || \"\"}\n                    onChange={(e) => setFormData({ ...formData, dueDate: e.target.value || null })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"goalId\">Associated Goal (Optional)</Label>\n                  <Select\n                    value={formData.goalId || \"none\"}\n                    onValueChange={(value) => setFormData({ ...formData, goalId: value === \"none\" ? null : value })}\n                  >\n                    <SelectTrigger id=\"goalId\" data-testid=\"select-task-goal\">\n                      <SelectValue placeholder=\"Select a goal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">No goal</SelectItem>\n                      {goals.map((goal) => (\n                        <SelectItem key={goal.id} value={goal.id}>\n                          {goal.title}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={formData.status}\n                    onValueChange={(value) => setFormData({ ...formData, status: value })}\n                  >\n                    <SelectTrigger id=\"status\" data-testid=\"select-task-status\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"todo\">To Do</SelectItem>\n                      <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                      <SelectItem value=\"done\">Done</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <DialogFooter>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending}\n                    data-testid=\"button-submit-task\"\n                  >\n                    Create Task\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingTask} onOpenChange={(open) => !open && setEditingTask(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Task</DialogTitle>\n            <DialogDescription>Update task details</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-title\">Title *</Label>\n              <Input\n                id=\"edit-title\"\n                data-testid=\"input-edit-task-title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Textarea\n                id=\"edit-description\"\n                data-testid=\"input-edit-task-description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                rows={3}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-dueDate\">Due Date</Label>\n              <Input\n                id=\"edit-dueDate\"\n                data-testid=\"input-edit-task-due-date\"\n                type=\"date\"\n                value={formData.dueDate || \"\"}\n                onChange={(e) => setFormData({ ...formData, dueDate: e.target.value || null })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-goalId\">Associated Goal</Label>\n              <Select\n                value={formData.goalId || \"none\"}\n                onValueChange={(value) => setFormData({ ...formData, goalId: value === \"none\" ? null : value })}\n              >\n                <SelectTrigger id=\"edit-goalId\" data-testid=\"select-edit-task-goal\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No goal</SelectItem>\n                  {goals.map((goal) => (\n                    <SelectItem key={goal.id} value={goal.id}>\n                      {goal.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-status\">Status</Label>\n              <Select\n                value={formData.status}\n                onValueChange={(value) => setFormData({ ...formData, status: value })}\n              >\n                <SelectTrigger id=\"edit-status\" data-testid=\"select-edit-task-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"todo\">To Do</SelectItem>\n                  <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                  <SelectItem value=\"done\">Done</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-update-task\"\n              >\n                Update Task\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Tasks Display */}\n      {tasksLoading ? (\n        <div className=\"text-center py-12 text-muted-foreground\">Loading tasks...</div>\n      ) : tasks.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <CheckSquare className=\"h-16 w-16 text-muted-foreground mb-4 opacity-50\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No tasks yet</h3>\n            <p className=\"text-muted-foreground mb-4\">Create your first task to get started</p>\n            <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-first-task\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Your First Task\n            </Button>\n          </CardContent>\n        </Card>\n      ) : viewMode === \"list\" ? (\n        <div className=\"space-y-4\">\n          {todoTasks.length > 0 && (\n            <div>\n              <h2 className=\"text-lg font-semibold mb-3\">To Do</h2>\n              <div className=\"space-y-2\">\n                {todoTasks.map((task) => (\n                  <TaskCard key={task.id} task={task} />\n                ))}\n              </div>\n            </div>\n          )}\n          {inProgressTasks.length > 0 && (\n            <div>\n              <h2 className=\"text-lg font-semibold mb-3\">In Progress</h2>\n              <div className=\"space-y-2\">\n                {inProgressTasks.map((task) => (\n                  <TaskCard key={task.id} task={task} />\n                ))}\n              </div>\n            </div>\n          )}\n          {doneTasks.length > 0 && (\n            <div>\n              <h2 className=\"text-lg font-semibold mb-3\">Done</h2>\n              <div className=\"space-y-2\">\n                {doneTasks.map((task) => (\n                  <TaskCard key={task.id} task={task} />\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <h2 className=\"text-lg font-semibold mb-3 px-3\">To Do</h2>\n            <div className=\"space-y-2\">\n              {todoTasks.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground text-sm\">No tasks</div>\n              ) : (\n                todoTasks.map((task) => <TaskCard key={task.id} task={task} />)\n              )}\n            </div>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold mb-3 px-3\">In Progress</h2>\n            <div className=\"space-y-2\">\n              {inProgressTasks.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground text-sm\">No tasks</div>\n              ) : (\n                inProgressTasks.map((task) => <TaskCard key={task.id} task={task} />)\n              )}\n            </div>\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold mb-3 px-3\">Done</h2>\n            <div className=\"space-y-2\">\n              {doneTasks.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground text-sm\">No tasks</div>\n              ) : (\n                doneTasks.map((task) => <TaskCard key={task.id} task={task} />)\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17979},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"docs/architecture.md":{"content":"# Opus Architecture\n\n## Overview\nOpus is a full-stack web application designed for young professionals to manage their personal and professional lives. The application follows a modern, scalable architecture with clear separation of concerns.\n\n## Technology Stack\n\n### Frontend\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter (lightweight React router)\n- **Styling**: TailwindCSS with custom design system\n- **UI Components**: shadcn/ui (Radix UI primitives)\n- **State Management**: TanStack Query (React Query v5)\n- **Forms**: React Hook Form with Zod validation\n- **Date Handling**: date-fns\n- **Build Tool**: Vite\n\n### Backend\n- **Runtime**: Node.js\n- **Framework**: Express.js\n- **Database**: PostgreSQL (Neon serverless)\n- **ORM**: Drizzle ORM\n- **Authentication**: Passport.js (local strategy)\n- **Session Management**: express-session with PostgreSQL store\n- **Validation**: Zod schemas\n\n### Infrastructure\n- **Database**: PostgreSQL with connection pooling\n- **Session Store**: PostgreSQL (via connect-pg-simple)\n- **Environment**: Replit (development and hosting)\n\n## Architecture Layers\n\n### 1. Data Layer (`shared/schema.ts`)\n- Defines all database tables using Drizzle ORM\n- Exports TypeScript types for type safety\n- Implements relationships between entities\n- Provides Zod schemas for validation\n\n**Tables:**\n- `users` - User accounts\n- `connections` - Professional relationships\n- `goals` - Personal and professional objectives\n- `tasks` - Task management with goal associations\n- `weeklyReviews` - Weekly reflection entries\n\n### 2. Storage Layer (`server/storage.ts`)\n- Implements `IStorage` interface for all CRUD operations\n- Uses Drizzle ORM for database queries\n- Ensures data isolation per user\n- Manages session store for authentication\n\n### 3. API Layer (`server/routes.ts`)\n- RESTful API endpoints\n- Authentication middleware\n- Request validation using Zod schemas\n- Proper error handling and status codes\n\n**Endpoints:**\n- `/api/user` - Authentication status\n- `/api/register` - User registration\n- `/api/login` - User login\n- `/api/logout` - User logout\n- `/api/connections` - Connection CRUD\n- `/api/goals` - Goal CRUD\n- `/api/tasks` - Task CRUD\n- `/api/reviews` - Weekly review CRUD\n\n### 4. Authentication Layer (`server/auth.ts`)\n- Passport.js local strategy\n- Password hashing with scrypt\n- Session-based authentication\n- Secure credential storage\n\n### 5. Frontend Application Layer\n\n#### Routing & Layout (`client/src/App.tsx`)\n- Protected routes for authenticated users\n- Sidebar navigation\n- Theme provider for dark/light mode\n- Global state management with Auth context\n\n#### Pages\n- **AuthPage**: Login and registration forms\n- **DashboardPage**: Overview with metrics and insights\n- **GoalsPage**: Goal tracking with progress indicators\n- **TasksPage**: Task management with kanban/list views\n- **ConnectionsPage**: Relationship management with grid/list views\n- **WeeklyReviewPage**: Reflection and planning interface\n\n#### Shared Hooks\n- `useAuth`: Authentication state and mutations\n- React Query hooks for data fetching\n\n## Data Flow\n\n### Authentication Flow\n1. User submits credentials via AuthPage\n2. Frontend calls `/api/login` or `/api/register`\n3. Backend validates credentials\n4. Passport.js creates session\n5. Session stored in PostgreSQL\n6. User data returned to frontend\n7. React Query caches user data\n8. Protected routes become accessible\n\n### CRUD Operations Flow\n1. User interacts with UI (e.g., creates a task)\n2. Form validation with Zod schema\n3. React Query mutation triggered\n4. API request to backend endpoint\n5. Authentication middleware checks session\n6. Request validation against schema\n7. Storage layer performs database operation\n8. Response returned to frontend\n9. React Query cache updated\n10. UI automatically re-renders\n\n## Security Features\n\n1. **Password Security**\n   - Passwords hashed using scrypt\n   - Salt generated per password\n   - Timing-safe comparison\n\n2. **Session Management**\n   - Secure session cookies\n   - PostgreSQL-backed sessions\n   - Session expiration\n\n3. **Authorization**\n   - User-scoped data queries\n   - Authentication middleware on all protected routes\n   - Request validation\n\n4. **Input Validation**\n   - Zod schemas on both frontend and backend\n   - Type-safe data structures\n   - SQL injection protection via ORM\n\n## Design System\n\nThe application follows a cohesive design system defined in `design_guidelines.md`:\n- Modern productivity-focused aesthetics\n- Dark mode primary, light mode secondary\n- Consistent spacing and typography\n- Accessible color contrast\n- Responsive mobile-first design\n- Smooth interactions and transitions\n\n## Future Enhancements\n\n### Planned Features\n1. **AI Integration** (`client/src/lib/ai.ts`)\n   - Weekly review reflection prompts\n   - Goal suggestions\n   - Task prioritization\n\n2. **Push Notifications**\n   - Task reminders using node-cron\n   - Connection follow-up alerts\n\n3. **Analytics Dashboard**\n   - Productivity trends\n   - Goal completion rates\n   - Connection relationship insights\n\n4. **Collaboration Features**\n   - Shared goals\n   - Task delegation\n   - Team accountability\n\n## Development Workflow\n\n1. **Schema First**: Define data models in `shared/schema.ts`\n2. **Storage Layer**: Implement CRUD in `server/storage.ts`\n3. **API Routes**: Create endpoints in `server/routes.ts`\n4. **Frontend Components**: Build UI with React Query integration\n5. **Database Migration**: Run `npm run db:push` to sync schema\n6. **Testing**: Validate functionality end-to-end\n\n## File Structure\n\n```\nopus/\n├── client/                 # Frontend application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   ├── pages/         # Route pages\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/           # Utilities and helpers\n│   │   └── App.tsx        # Main application component\n│   └── index.html         # HTML entry point\n│\n├── server/                # Backend application\n│   ├── auth.ts           # Authentication setup\n│   ├── db.ts             # Database connection\n│   ├── routes.ts         # API endpoints\n│   ├── storage.ts        # Data access layer\n│   └── index.ts          # Server entry point\n│\n├── shared/               # Shared code\n│   └── schema.ts        # Database schema and types\n│\n└── docs/                # Documentation\n    ├── architecture.md\n    ├── api_endpoints.md\n    ├── setup_guide.md\n    └── roadmap.md\n```\n","size_bytes":6597},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"README.md":{"content":"# Opus\n\n> A personal and client management app for young professionals\n\nOpus helps young professionals stay organized, build meaningful connections, and achieve their goals with powerful tools for task management, goal tracking, and weekly reflection.\n\n![Opus Dashboard](https://via.placeholder.com/800x400/210B58/FFFFFF?text=Opus+Dashboard)\n\n## Features\n\n### 🎯 Goal Tracking\n- Set personal and professional objectives\n- Track progress with visual indicators\n- Associate tasks with specific goals\n- Target date management\n\n### ✅ Task Management\n- Create and organize tasks\n- Kanban board and list views\n- Link tasks to goals\n- Due date tracking and status management\n\n### 👥 Connection Management\n- Track professional relationships\n- Log last contact dates\n- Set relationship reminders\n- Grid and list view options\n\n### 📝 Weekly Reviews\n- Structured reflection system\n- Track wins and achievements\n- Document lessons learned\n- Plan next week's focus\n\n### 🎨 Modern UI\n- Clean, productivity-focused design\n- Dark and light themes\n- Responsive mobile-first layout\n- Smooth interactions and transitions\n\n## Tech Stack\n\n**Frontend:**\n- React 18 + TypeScript\n- TailwindCSS + shadcn/ui\n- TanStack Query (React Query)\n- Wouter (routing)\n- React Hook Form + Zod validation\n\n**Backend:**\n- Node.js + Express\n- PostgreSQL (Neon serverless)\n- Drizzle ORM\n- Passport.js authentication\n- Session-based security\n\n## Quick Start\n\n### Prerequisites\n- Node.js 20+\n- PostgreSQL database\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/your-username/opus-app.git\ncd opus-app\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Set up environment variables:\n```bash\ncp .env.example .env\n# Edit .env with your database credentials\n```\n\n4. Push database schema:\n```bash\nnpm run db:push\n```\n\n5. Start the development server:\n```bash\nnpm run dev\n```\n\nThe app will be available at `http://localhost:5000`\n\n## Project Structure\n\n```\nopus/\n├── client/          # React frontend\n├── server/          # Express backend\n├── shared/          # Shared TypeScript types\n├── docs/            # Documentation\n└── package.json\n```\n\n## Documentation\n\n- [Architecture Overview](./docs/architecture.md)\n- [API Endpoints](./docs/api_endpoints.md)\n- [Setup Guide](./docs/setup_guide.md)\n- [Roadmap](./docs/roadmap.md)\n\n## Development\n\n### Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run db:push` - Push schema changes to database\n- `npm run db:studio` - Open Drizzle Studio\n\n### Adding Features\n\n1. Define schema in `shared/schema.ts`\n2. Update storage layer in `server/storage.ts`\n3. Add API routes in `server/routes.ts`\n4. Build frontend components in `client/src/`\n5. Run `npm run db:push` to sync database\n\n## Roadmap\n\n### Current (MVP)\n- ✅ Authentication\n- ✅ Dashboard with metrics\n- ✅ Goal tracking\n- ✅ Task management\n- ✅ Connection management\n- ✅ Weekly reviews\n- ✅ Dark/light themes\n\n### Coming Soon\n- 🤖 AI-powered reflection prompts\n- 📱 Push notifications for tasks\n- 📊 Analytics dashboard\n- 👥 Collaboration features\n- 📱 Mobile apps (iOS/Android)\n- 🔗 Calendar & CRM integrations\n\nSee the [full roadmap](./docs/roadmap.md) for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Acknowledgments\n\n- Built with [Replit](https://replit.com)\n- UI components from [shadcn/ui](https://ui.shadcn.com)\n- Icons from [Lucide](https://lucide.dev)\n\n## Support\n\n- 📧 Email: support@opus-app.com\n- 🐛 Issues: [GitHub Issues](https://github.com/your-username/opus-app/issues)\n- 📖 Docs: [Documentation](./docs/architecture.md)\n\n---\n\nMade with ❤️ for young professionals everywhere\n","size_bytes":4085},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/connections-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Users, Plus, Calendar, Grid, List, Pencil, Trash2 } from \"lucide-react\";\nimport { format, parseISO, differenceInDays } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Connection, InsertConnection } from \"@shared/schema\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nexport default function ConnectionsPage() {\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingConnection, setEditingConnection] = useState<Connection | null>(null);\n  const [formData, setFormData] = useState<InsertConnection>({\n    name: \"\",\n    relationship: \"\",\n    lastTouch: null,\n    notes: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const { data: connections = [], isLoading } = useQuery<Connection[]>({\n    queryKey: [\"/api/connections\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertConnection) => {\n      const res = await apiRequest(\"POST\", \"/api/connections\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/connections\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({ title: \"Connection created successfully\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertConnection> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/connections/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/connections\"] });\n      setEditingConnection(null);\n      resetForm();\n      toast({ title: \"Connection updated successfully\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/connections/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/connections\"] });\n      toast({ title: \"Connection deleted successfully\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      name: \"\",\n      relationship: \"\",\n      lastTouch: null,\n      notes: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingConnection) {\n      updateMutation.mutate({ id: editingConnection.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const openEdit = (connection: Connection) => {\n    setEditingConnection(connection);\n    setFormData({\n      name: connection.name,\n      relationship: connection.relationship,\n      lastTouch: connection.lastTouch,\n      notes: connection.notes || \"\",\n    });\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getDaysSinceLastTouch = (lastTouch: string | null) => {\n    if (!lastTouch) return null;\n    return differenceInDays(new Date(), parseISO(lastTouch));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight mb-2\" data-testid=\"text-connections-title\">\n            Connections\n          </h1>\n          <p className=\"text-muted-foreground\">Manage your professional relationships</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-1 p-1 bg-muted rounded-lg\">\n            <Button\n              variant={viewMode === \"grid\" ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"grid\")}\n              data-testid=\"button-view-grid\"\n            >\n              <Grid className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant={viewMode === \"list\" ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setViewMode(\"list\")}\n              data-testid=\"button-view-list\"\n            >\n              <List className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-connection\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Connection\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Add New Connection</DialogTitle>\n                <DialogDescription>Create a new professional connection to track</DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\">Name *</Label>\n                  <Input\n                    id=\"name\"\n                    data-testid=\"input-connection-name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"relationship\">Relationship *</Label>\n                  <Input\n                    id=\"relationship\"\n                    data-testid=\"input-connection-relationship\"\n                    value={formData.relationship}\n                    onChange={(e) => setFormData({ ...formData, relationship: e.target.value })}\n                    placeholder=\"e.g., Mentor, Colleague, Client\"\n                    required\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"lastTouch\">Last Contact</Label>\n                  <Input\n                    id=\"lastTouch\"\n                    data-testid=\"input-connection-last-touch\"\n                    type=\"date\"\n                    value={formData.lastTouch || \"\"}\n                    onChange={(e) => setFormData({ ...formData, lastTouch: e.target.value || null })}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"notes\">Notes</Label>\n                  <Textarea\n                    id=\"notes\"\n                    data-testid=\"input-connection-notes\"\n                    value={formData.notes}\n                    onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                    placeholder=\"Add any relevant notes...\"\n                    rows={3}\n                  />\n                </div>\n                <DialogFooter>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending}\n                    data-testid=\"button-submit-connection\"\n                  >\n                    Create Connection\n                  </Button>\n                </DialogFooter>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingConnection} onOpenChange={(open) => !open && setEditingConnection(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Connection</DialogTitle>\n            <DialogDescription>Update connection details</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-name\">Name *</Label>\n              <Input\n                id=\"edit-name\"\n                data-testid=\"input-edit-connection-name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-relationship\">Relationship *</Label>\n              <Input\n                id=\"edit-relationship\"\n                data-testid=\"input-edit-connection-relationship\"\n                value={formData.relationship}\n                onChange={(e) => setFormData({ ...formData, relationship: e.target.value })}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-lastTouch\">Last Contact</Label>\n              <Input\n                id=\"edit-lastTouch\"\n                data-testid=\"input-edit-connection-last-touch\"\n                type=\"date\"\n                value={formData.lastTouch || \"\"}\n                onChange={(e) => setFormData({ ...formData, lastTouch: e.target.value || null })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-notes\">Notes</Label>\n              <Textarea\n                id=\"edit-notes\"\n                data-testid=\"input-edit-connection-notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                rows={3}\n              />\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-update-connection\"\n              >\n                Update Connection\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Connections List/Grid */}\n      {isLoading ? (\n        <div className=\"text-center py-12 text-muted-foreground\">Loading connections...</div>\n      ) : connections.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Users className=\"h-16 w-16 text-muted-foreground mb-4 opacity-50\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No connections yet</h3>\n            <p className=\"text-muted-foreground mb-4\">Start building your professional network</p>\n            <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-first-connection\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Your First Connection\n            </Button>\n          </CardContent>\n        </Card>\n      ) : viewMode === \"grid\" ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {connections.map((connection) => {\n            const daysSince = getDaysSinceLastTouch(connection.lastTouch);\n            const needsAttention = daysSince === null || daysSince > 30;\n\n            return (\n              <Card key={connection.id} className=\"hover-elevate\" data-testid={`connection-card-${connection.id}`}>\n                <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n                  <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                    <Avatar className=\"h-10 w-10\">\n                      <AvatarFallback>{getInitials(connection.name)}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-base truncate\">{connection.name}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">{connection.relationship}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => openEdit(connection)}\n                      data-testid={`button-edit-connection-${connection.id}`}\n                    >\n                      <Pencil className=\"h-3 w-3\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(connection.id)}\n                      data-testid={`button-delete-connection-${connection.id}`}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                      <Calendar className=\"h-4 w-4\" />\n                      {connection.lastTouch ? format(parseISO(connection.lastTouch), \"MMM d, yyyy\") : \"No contact yet\"}\n                    </div>\n                    {needsAttention && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {daysSince ? `${daysSince}d ago` : \"Never\"}\n                      </Badge>\n                    )}\n                  </div>\n                  {connection.notes && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\">{connection.notes}</p>\n                  )}\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"divide-y\">\n              {connections.map((connection) => {\n                const daysSince = getDaysSinceLastTouch(connection.lastTouch);\n                const needsAttention = daysSince === null || daysSince > 30;\n\n                return (\n                  <div\n                    key={connection.id}\n                    className=\"flex items-center justify-between gap-4 p-4 hover-elevate\"\n                    data-testid={`connection-row-${connection.id}`}\n                  >\n                    <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                      <Avatar className=\"h-10 w-10\">\n                        <AvatarFallback>{getInitials(connection.name)}</AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium truncate\">{connection.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{connection.relationship}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"text-right hidden sm:block\">\n                        <p className=\"text-sm font-mono text-muted-foreground\">\n                          {connection.lastTouch ? format(parseISO(connection.lastTouch), \"MMM d, yyyy\") : \"No contact\"}\n                        </p>\n                        {needsAttention && (\n                          <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                            {daysSince ? `${daysSince}d ago` : \"Never\"}\n                          </Badge>\n                        )}\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openEdit(connection)}\n                          data-testid={`button-edit-connection-list-${connection.id}`}\n                        >\n                          <Pencil className=\"h-4 w-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(connection.id)}\n                          data-testid={`button-delete-connection-list-${connection.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":16570},"client/src/App.tsx":{"content":"// Reference: javascript_auth_all_persistance blueprint for routing setup\nimport { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  LayoutDashboard, \n  Target, \n  CheckSquare, \n  Users, \n  PenLine, \n  LogOut \n} from \"lucide-react\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport DashboardPage from \"@/pages/dashboard-page\";\nimport GoalsPage from \"@/pages/goals-page\";\nimport TasksPage from \"@/pages/tasks-page\";\nimport ConnectionsPage from \"@/pages/connections-page\";\nimport WeeklyReviewPage from \"@/pages/weekly-review-page\";\n\nfunction AppContent() {\n  const [location, setLocation] = useLocation();\n  const { user, logoutMutation } = useAuth();\n\n  const navItems = [\n    { path: \"/\", icon: LayoutDashboard, label: \"Dashboard\" },\n    { path: \"/goals\", icon: Target, label: \"Goals\" },\n    { path: \"/tasks\", icon: CheckSquare, label: \"Tasks\" },\n    { path: \"/connections\", icon: Users, label: \"Connections\" },\n    { path: \"/reviews\", icon: PenLine, label: \"Reviews\" },\n  ];\n\n  if (!user) {\n    return (\n      <Switch>\n        <Route path=\"/auth\" component={AuthPage} />\n        <Route path=\"/\" component={AuthPage} />\n        <Route component={NotFound} />\n      </Switch>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      {/* Sidebar */}\n      <aside className=\"w-64 border-r bg-card flex flex-col\">\n        <div className=\"p-6 border-b\">\n          <h1 className=\"text-2xl font-bold tracking-tight flex items-center gap-2\">\n            <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-lg\">O</span>\n            </div>\n            Opus\n          </h1>\n        </div>\n        \n        <nav className=\"flex-1 p-4 space-y-1\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.path;\n            \n            return (\n              <Button\n                key={item.path}\n                variant={isActive ? \"secondary\" : \"ghost\"}\n                className=\"w-full justify-start\"\n                onClick={() => setLocation(item.path)}\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                <Icon className=\"h-4 w-4 mr-3\" />\n                {item.label}\n              </Button>\n            );\n          })}\n        </nav>\n\n        <div className=\"p-4 border-t space-y-2\">\n          <div className=\"px-3 py-2\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"text-username\">\n              {user.username}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">Professional</p>\n          </div>\n          <div className=\"flex gap-2\">\n            <ThemeToggle />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"flex-1\"\n              onClick={() => {\n                logoutMutation.mutate(undefined, {\n                  onSuccess: () => setLocation(\"/auth\")\n                });\n              }}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              Logout\n            </Button>\n          </div>\n        </div>\n      </aside>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-auto\">\n        <div className=\"container mx-auto p-6 md:p-8 max-w-7xl\">\n          <Switch>\n            <Route path=\"/\" component={DashboardPage} />\n            <Route path=\"/goals\" component={GoalsPage} />\n            <Route path=\"/tasks\" component={TasksPage} />\n            <Route path=\"/connections\" component={ConnectionsPage} />\n            <Route path=\"/reviews\" component={WeeklyReviewPage} />\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction Router() {\n  return <AppContent />;\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <TooltipProvider>\n          <AuthProvider>\n            <Toaster />\n            <Router />\n          </AuthProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":4726},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/routes.ts":{"content":"// Reference: javascript_auth_all_persistance blueprint\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth } from \"./auth\";\nimport { \n  insertConnectionSchema, \n  insertGoalSchema, \n  insertTaskSchema, \n  insertWeeklyReviewSchema \n} from \"@shared/schema\";\n\n// Middleware to ensure user is authenticated\nfunction requireAuth(req: any, res: any, next: any) {\n  if (!req.isAuthenticated()) {\n    return res.sendStatus(401);\n  }\n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Sets up /api/register, /api/login, /api/logout, /api/user\n  setupAuth(app);\n\n  // Connection routes\n  app.get(\"/api/connections\", requireAuth, async (req, res) => {\n    const connections = await storage.getConnections(req.user!.id);\n    res.json(connections);\n  });\n\n  app.post(\"/api/connections\", requireAuth, async (req, res) => {\n    try {\n      const data = insertConnectionSchema.parse(req.body);\n      const connection = await storage.createConnection(req.user!.id, data);\n      res.status(201).json(connection);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/connections/:id\", requireAuth, async (req, res) => {\n    try {\n      const data = insertConnectionSchema.partial().parse(req.body);\n      const connection = await storage.updateConnection(req.params.id, req.user!.id, data);\n      if (!connection) {\n        return res.status(404).json({ error: \"Connection not found\" });\n      }\n      res.json(connection);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/connections/:id\", requireAuth, async (req, res) => {\n    const deleted = await storage.deleteConnection(req.params.id, req.user!.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Connection not found\" });\n    }\n    res.sendStatus(204);\n  });\n\n  // Goal routes\n  app.get(\"/api/goals\", requireAuth, async (req, res) => {\n    const goals = await storage.getGoals(req.user!.id);\n    res.json(goals);\n  });\n\n  app.post(\"/api/goals\", requireAuth, async (req, res) => {\n    try {\n      const data = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(req.user!.id, data);\n      res.status(201).json(goal);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/goals/:id\", requireAuth, async (req, res) => {\n    try {\n      const data = insertGoalSchema.partial().parse(req.body);\n      const goal = await storage.updateGoal(req.params.id, req.user!.id, data);\n      if (!goal) {\n        return res.status(404).json({ error: \"Goal not found\" });\n      }\n      res.json(goal);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", requireAuth, async (req, res) => {\n    const deleted = await storage.deleteGoal(req.params.id, req.user!.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Goal not found\" });\n    }\n    res.sendStatus(204);\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", requireAuth, async (req, res) => {\n    const tasks = await storage.getTasks(req.user!.id);\n    res.json(tasks);\n  });\n\n  app.post(\"/api/tasks\", requireAuth, async (req, res) => {\n    try {\n      const data = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(req.user!.id, data);\n      res.status(201).json(task);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", requireAuth, async (req, res) => {\n    try {\n      const data = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(req.params.id, req.user!.id, data);\n      if (!task) {\n        return res.status(404).json({ error: \"Task not found\" });\n      }\n      res.json(task);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", requireAuth, async (req, res) => {\n    const deleted = await storage.deleteTask(req.params.id, req.user!.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Task not found\" });\n    }\n    res.sendStatus(204);\n  });\n\n  // Weekly Review routes\n  app.get(\"/api/reviews\", requireAuth, async (req, res) => {\n    const reviews = await storage.getWeeklyReviews(req.user!.id);\n    res.json(reviews);\n  });\n\n  app.post(\"/api/reviews\", requireAuth, async (req, res) => {\n    try {\n      const data = insertWeeklyReviewSchema.parse(req.body);\n      const review = await storage.createWeeklyReview(req.user!.id, data);\n      res.status(201).json(review);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/reviews/:id\", requireAuth, async (req, res) => {\n    const deleted = await storage.deleteWeeklyReview(req.params.id, req.user!.id);\n    if (!deleted) {\n      return res.status(404).json({ error: \"Review not found\" });\n    }\n    res.sendStatus(204);\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":5163},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/components/theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":677},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* EDITORIAL LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  /* Editorial Color Palette */\n  --background: 0 0% 98%;  /* Ivory */\n\n  --foreground: 0 0% 11%;  /* Charcoal */\n\n  --border: 0 0% 91%;  /* Pearl */\n\n  --card: 0 0% 100%;  /* Pure white */\n\n  --card-foreground: 0 0% 11%;  /* Charcoal */\n\n  --card-border: 0 0% 91%;  /* Pearl */\n\n  --sidebar: 0 0% 96%;  /* Alabaster */\n\n  --sidebar-foreground: 0 0% 11%;  /* Charcoal */\n\n  --sidebar-border: 0 0% 91%;  /* Pearl */\n\n  --sidebar-primary: 208 50% 35%;  /* Ocean */\n\n  --sidebar-primary-foreground: 0 0% 100%;  /* Pure */\n\n  --sidebar-accent: 0 0% 96%;  /* Alabaster */\n\n  --sidebar-accent-foreground: 0 0% 11%;  /* Charcoal */\n\n  --sidebar-ring: 208 50% 35%;  /* Ocean */\n\n  --popover: 0 0% 100%;  /* Pure */\n\n  --popover-foreground: 0 0% 11%;  /* Charcoal */\n\n  --popover-border: 0 0% 91%;  /* Pearl */\n\n  --primary: 208 50% 35%;  /* Ocean - primary actions */\n\n  --primary-foreground: 0 0% 100%;  /* Pure */\n\n  --secondary: 0 0% 96%;  /* Alabaster */\n\n  --secondary-foreground: 0 0% 11%;  /* Charcoal */\n\n  --muted: 0 0% 96%;  /* Alabaster */\n\n  --muted-foreground: 0 0% 54%;  /* Stone */\n\n  --accent: 0 0% 96%;  /* Alabaster */\n\n  --accent-foreground: 0 0% 11%;  /* Charcoal */\n\n  --destructive: 4 42% 46%;  /* Rust */\n\n  --destructive-foreground: 0 0% 100%;  /* Pure */\n\n  /* Editorial semantic colors */\n  --ink: 0 0% 4%;  /* Darkest text */\n  --charcoal: 0 0% 11%;  /* Primary text */\n  --graphite: 0 0% 31%;  /* Secondary text */\n  --stone: 0 0% 54%;  /* Tertiary text */\n  --fog: 0 0% 72%;  /* Subtle text */\n  --pearl: 0 0% 91%;  /* Borders */\n  --alabaster: 0 0% 96%;  /* Subtle backgrounds */\n  --ivory: 0 0% 98%;  /* Main background */\n  --pure: 0 0% 100%;  /* White */\n\n  /* Editorial accent colors */\n  --forest: 156 44% 20%;  /* Success */\n  --sage: 171 22% 39%;  /* Calm */\n  --rust: 4 42% 46%;  /* Warning */\n  --sand: 35 48% 64%;  /* Warm */\n  --ocean: 208 50% 35%;  /* Primary */\n\n  --input: 0 0% 91%;  /* Pearl */\n  --ring: 208 50% 35%;  /* Ocean */\n  --chart-1: 208 50% 35%;  /* Ocean */\n  --chart-2: 156 44% 20%;  /* Forest */\n  --chart-3: 35 48% 64%;  /* Sand */\n  --chart-4: 4 42% 46%;  /* Rust */\n  --chart-5: 171 22% 39%;  /* Sage */\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Fraunces, 'Libre Baskerville', Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'SF Mono', Monaco, monospace;\n  --radius: .25rem; /* Minimal rounding - 4px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 4% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 4% / 0.06);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 4% / 0.08), 0px 1px 2px -1px hsl(0 0% 4% / 0.08);\n  --shadow: 0px 2px 4px -1px hsl(0 0% 4% / 0.10), 0px 4px 6px -1px hsl(0 0% 4% / 0.10);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 4% / 0.12), 0px 2px 4px -2px hsl(0 0% 4% / 0.10);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 4% / 0.14), 0px 4px 6px -4px hsl(0 0% 4% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 4% / 0.16), 0px 8px 10px -6px hsl(0 0% 4% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 4% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  /* Dark mode - inverted editorial */\n  --background: 0 0% 11%;  /* Charcoal */\n\n  --foreground: 0 0% 98%;  /* Ivory */\n\n  --border: 0 0% 31%;  /* Graphite */\n\n  --card: 0 0% 4%;  /* Ink */\n\n  --card-foreground: 0 0% 98%;  /* Ivory */\n\n  --card-border: 0 0% 31%;  /* Graphite */\n\n  --sidebar: 0 0% 11%;  /* Charcoal */\n\n  --sidebar-foreground: 0 0% 98%;  /* Ivory */\n\n  --sidebar-border: 0 0% 31%;  /* Graphite */\n\n  --sidebar-primary: 208 50% 45%;  /* Lighter ocean */\n\n  --sidebar-primary-foreground: 0 0% 98%;  /* Ivory */\n\n  --sidebar-accent: 0 0% 16%;  /* Darker */\n\n  --sidebar-accent-foreground: 0 0% 91%;  /* Pearl */\n\n  --sidebar-ring: 208 50% 45%;  /* Lighter ocean */\n\n  --popover: 0 0% 16%;  /* Darker */\n\n  --popover-foreground: 0 0% 98%;  /* Ivory */\n\n  --popover-border: 0 0% 31%;  /* Graphite */\n\n  --primary: 208 50% 45%;  /* Lighter ocean */\n\n  --primary-foreground: 0 0% 98%;  /* Ivory */\n\n  --secondary: 0 0% 31%;  /* Graphite */\n\n  --secondary-foreground: 0 0% 91%;  /* Pearl */\n\n  --muted: 0 0% 31%;  /* Graphite */\n\n  --muted-foreground: 0 0% 72%;  /* Fog */\n\n  --accent: 0 0% 31%;  /* Graphite */\n\n  --accent-foreground: 0 0% 91%;  /* Pearl */\n\n  --destructive: 4 42% 56%;  /* Lighter rust */\n\n  --destructive-foreground: 0 0% 98%;  /* Ivory */\n\n  --input: 0 0% 31%;  /* Graphite */\n  --ring: 208 50% 45%;  /* Lighter ocean */\n  --chart-1: 208 50% 45%;  /* Lighter ocean */\n  --chart-2: 156 44% 30%;  /* Lighter forest */\n  --chart-3: 35 48% 74%;  /* Lighter sand */\n  --chart-4: 4 42% 56%;  /* Lighter rust */\n  --chart-5: 171 22% 49%;  /* Lighter sage */\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.24);\n  --shadow-sm: 0px 1px 3px 0px hsl(0 0% 0% / 0.28), 0px 1px 2px -1px hsl(0 0% 0% / 0.28);\n  --shadow: 0px 2px 4px -1px hsl(0 0% 0% / 0.32), 0px 4px 6px -1px hsl(0 0% 0% / 0.32);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.36), 0px 2px 4px -2px hsl(0 0% 0% / 0.32);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.40), 0px 4px 6px -4px hsl(0 0% 0% / 0.32);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.44), 0px 8px 10px -6px hsl(0 0% 0% / 0.32);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.60);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n","size_bytes":12903},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"docs/api_endpoints.md":{"content":"# API Endpoints\n\n## Authentication Endpoints\n\n### POST /api/register\nCreate a new user account.\n\n**Request Body:**\n```json\n{\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n```\n\n**Response (201):**\n```json\n{\n  \"id\": \"uuid\",\n  \"username\": \"string\",\n  \"password\": \"hashed-password\"\n}\n```\n\n**Errors:**\n- 400: Username already exists\n\n---\n\n### POST /api/login\nAuthenticate a user and create a session.\n\n**Request Body:**\n```json\n{\n  \"username\": \"string\",\n  \"password\": \"string\"\n}\n```\n\n**Response (200):**\n```json\n{\n  \"id\": \"uuid\",\n  \"username\": \"string\",\n  \"password\": \"hashed-password\"\n}\n```\n\n**Errors:**\n- 401: Invalid credentials\n\n---\n\n### POST /api/logout\nEnd user session.\n\n**Response (200):**\n```\n200 OK\n```\n\n---\n\n### GET /api/user\nGet current authenticated user.\n\n**Response (200):**\n```json\n{\n  \"id\": \"uuid\",\n  \"username\": \"string\",\n  \"password\": \"hashed-password\"\n}\n```\n\n**Errors:**\n- 401: Not authenticated\n\n---\n\n## Connection Endpoints\n\n### GET /api/connections\nGet all connections for the authenticated user.\n\n**Headers:**\n- Cookie: session cookie (required)\n\n**Response (200):**\n```json\n[\n  {\n    \"id\": \"uuid\",\n    \"userId\": \"uuid\",\n    \"name\": \"string\",\n    \"relationship\": \"string\",\n    \"lastTouch\": \"YYYY-MM-DD\" | null,\n    \"notes\": \"string\" | null,\n    \"createdAt\": \"ISO timestamp\"\n  }\n]\n```\n\n---\n\n### POST /api/connections\nCreate a new connection.\n\n**Request Body:**\n```json\n{\n  \"name\": \"string\",\n  \"relationship\": \"string\",\n  \"lastTouch\": \"YYYY-MM-DD\" | null,\n  \"notes\": \"string\" | null\n}\n```\n\n**Response (201):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"name\": \"string\",\n  \"relationship\": \"string\",\n  \"lastTouch\": \"YYYY-MM-DD\" | null,\n  \"notes\": \"string\" | null,\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n---\n\n### PATCH /api/connections/:id\nUpdate an existing connection.\n\n**Request Body:**\n```json\n{\n  \"name\": \"string\",\n  \"relationship\": \"string\",\n  \"lastTouch\": \"YYYY-MM-DD\" | null,\n  \"notes\": \"string\" | null\n}\n```\n\n**Response (200):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"name\": \"string\",\n  \"relationship\": \"string\",\n  \"lastTouch\": \"YYYY-MM-DD\" | null,\n  \"notes\": \"string\" | null,\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n**Errors:**\n- 404: Connection not found\n\n---\n\n### DELETE /api/connections/:id\nDelete a connection.\n\n**Response (204):**\n```\n204 No Content\n```\n\n**Errors:**\n- 404: Connection not found\n\n---\n\n## Goal Endpoints\n\n### GET /api/goals\nGet all goals for the authenticated user.\n\n**Response (200):**\n```json\n[\n  {\n    \"id\": \"uuid\",\n    \"userId\": \"uuid\",\n    \"title\": \"string\",\n    \"description\": \"string\" | null,\n    \"targetDate\": \"YYYY-MM-DD\" | null,\n    \"progress\": 0-100,\n    \"createdAt\": \"ISO timestamp\"\n  }\n]\n```\n\n---\n\n### POST /api/goals\nCreate a new goal.\n\n**Request Body:**\n```json\n{\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"targetDate\": \"YYYY-MM-DD\" | null,\n  \"progress\": 0-100\n}\n```\n\n**Response (201):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"targetDate\": \"YYYY-MM-DD\" | null,\n  \"progress\": 0-100,\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n---\n\n### PATCH /api/goals/:id\nUpdate an existing goal.\n\n**Request Body:**\n```json\n{\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"targetDate\": \"YYYY-MM-DD\" | null,\n  \"progress\": 0-100\n}\n```\n\n**Response (200):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"targetDate\": \"YYYY-MM-DD\" | null,\n  \"progress\": 0-100,\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n**Errors:**\n- 404: Goal not found\n\n---\n\n### DELETE /api/goals/:id\nDelete a goal.\n\n**Response (204):**\n```\n204 No Content\n```\n\n**Errors:**\n- 404: Goal not found\n\n---\n\n## Task Endpoints\n\n### GET /api/tasks\nGet all tasks for the authenticated user.\n\n**Response (200):**\n```json\n[\n  {\n    \"id\": \"uuid\",\n    \"userId\": \"uuid\",\n    \"title\": \"string\",\n    \"description\": \"string\" | null,\n    \"dueDate\": \"YYYY-MM-DD\" | null,\n    \"goalId\": \"uuid\" | null,\n    \"status\": \"todo\" | \"in-progress\" | \"done\",\n    \"createdAt\": \"ISO timestamp\"\n  }\n]\n```\n\n---\n\n### POST /api/tasks\nCreate a new task.\n\n**Request Body:**\n```json\n{\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"dueDate\": \"YYYY-MM-DD\" | null,\n  \"goalId\": \"uuid\" | null,\n  \"status\": \"todo\" | \"in-progress\" | \"done\"\n}\n```\n\n**Response (201):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"dueDate\": \"YYYY-MM-DD\" | null,\n  \"goalId\": \"uuid\" | null,\n  \"status\": \"todo\" | \"in-progress\" | \"done\",\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n---\n\n### PATCH /api/tasks/:id\nUpdate an existing task.\n\n**Request Body:**\n```json\n{\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"dueDate\": \"YYYY-MM-DD\" | null,\n  \"goalId\": \"uuid\" | null,\n  \"status\": \"todo\" | \"in-progress\" | \"done\"\n}\n```\n\n**Response (200):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"title\": \"string\",\n  \"description\": \"string\" | null,\n  \"dueDate\": \"YYYY-MM-DD\" | null,\n  \"goalId\": \"uuid\" | null,\n  \"status\": \"todo\" | \"in-progress\" | \"done\",\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n**Errors:**\n- 404: Task not found\n\n---\n\n### DELETE /api/tasks/:id\nDelete a task.\n\n**Response (204):**\n```\n204 No Content\n```\n\n**Errors:**\n- 404: Task not found\n\n---\n\n## Weekly Review Endpoints\n\n### GET /api/reviews\nGet all weekly reviews for the authenticated user.\n\n**Response (200):**\n```json\n[\n  {\n    \"id\": \"uuid\",\n    \"userId\": \"uuid\",\n    \"weekStart\": \"YYYY-MM-DD\",\n    \"summary\": \"string\" | null,\n    \"wins\": \"string\" | null,\n    \"lessons\": \"string\" | null,\n    \"nextSteps\": \"string\" | null,\n    \"createdAt\": \"ISO timestamp\"\n  }\n]\n```\n\n---\n\n### POST /api/reviews\nCreate a new weekly review.\n\n**Request Body:**\n```json\n{\n  \"weekStart\": \"YYYY-MM-DD\",\n  \"summary\": \"string\" | null,\n  \"wins\": \"string\" | null,\n  \"lessons\": \"string\" | null,\n  \"nextSteps\": \"string\" | null\n}\n```\n\n**Response (201):**\n```json\n{\n  \"id\": \"uuid\",\n  \"userId\": \"uuid\",\n  \"weekStart\": \"YYYY-MM-DD\",\n  \"summary\": \"string\" | null,\n  \"wins\": \"string\" | null,\n  \"lessons\": \"string\" | null,\n  \"nextSteps\": \"string\" | null,\n  \"createdAt\": \"ISO timestamp\"\n}\n```\n\n---\n\n### DELETE /api/reviews/:id\nDelete a weekly review.\n\n**Response (204):**\n```\n204 No Content\n```\n\n**Errors:**\n- 404: Review not found\n\n---\n\n## Error Responses\n\nAll endpoints may return these error responses:\n\n### 400 Bad Request\nInvalid request body or validation error.\n```json\n{\n  \"error\": \"Validation error message\"\n}\n```\n\n### 401 Unauthorized\nUser not authenticated.\n```\n401 Unauthorized\n```\n\n### 404 Not Found\nResource not found.\n```json\n{\n  \"error\": \"Resource not found\"\n}\n```\n\n### 500 Internal Server Error\nServer error.\n```json\n{\n  \"error\": \"Internal server error\"\n}\n```\n\n---\n\n## Authentication\n\nAll endpoints except `/api/register`, `/api/login`, and `/api/logout` require authentication via session cookies. The session cookie is automatically set upon successful login or registration.\n","size_bytes":6886},"docs/setup_guide.md":{"content":"# Opus Setup Guide\n\n## Prerequisites\n\n- Node.js 20 or higher\n- PostgreSQL database (Neon or local)\n- npm or yarn package manager\n\n## Local Development Setup\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/your-username/opus-app.git\ncd opus-app\n```\n\n### 2. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 3. Environment Configuration\n\nCreate a `.env` file in the root directory:\n\n```bash\ncp .env.example .env\n```\n\nUpdate the `.env` file with your configuration:\n\n```env\n# Database Configuration\nDATABASE_URL=postgresql://username:password@host:port/database\n\n# Session Secret (generate a random string)\nSESSION_SECRET=your-secret-key-here\n\n# Postgres Connection Details\nPGHOST=your-postgres-host\nPGPORT=5432\nPGUSER=your-postgres-user\nPGPASSWORD=your-postgres-password\nPGDATABASE=your-database-name\n```\n\n### 4. Database Setup\n\nPush the database schema:\n\n```bash\nnpm run db:push\n```\n\nThis command will:\n- Connect to your PostgreSQL database\n- Create all necessary tables\n- Set up relationships and constraints\n\n### 5. Run the Application\n\nStart the development server:\n\n```bash\nnpm run dev\n```\n\nThe application will be available at:\n- Frontend: `http://localhost:5000`\n- Backend API: `http://localhost:5000/api`\n\n## Replit Setup\n\n### 1. Create a Replit Project\n\n1. Go to [Replit](https://replit.com)\n2. Click \"Create Repl\"\n3. Import from GitHub or create a new Node.js project\n\n### 2. Configure Database\n\nReplit provides built-in PostgreSQL:\n\n1. Click \"Database\" in the left sidebar\n2. Create a new PostgreSQL database\n3. Environment variables will be auto-configured\n\n### 3. Set Session Secret\n\nAdd `SESSION_SECRET` to Replit Secrets:\n\n1. Click on \"Secrets\" (lock icon)\n2. Add new secret:\n   - Key: `SESSION_SECRET`\n   - Value: Generate a random string (at least 32 characters)\n\n### 4. Deploy Database Schema\n\nIn the Replit shell, run:\n\n```bash\nnpm run db:push\n```\n\n### 5. Run the Application\n\nClick the \"Run\" button or use:\n\n```bash\nnpm run dev\n```\n\n## Project Structure\n\n```\nopus/\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/    # Reusable UI components\n│   │   ├── pages/         # Application pages\n│   │   ├── hooks/         # Custom React hooks\n│   │   ├── lib/           # Utilities and helpers\n│   │   └── App.tsx        # Main application\n│   └── index.html\n│\n├── server/                # Backend Express application\n│   ├── auth.ts           # Authentication logic\n│   ├── db.ts             # Database connection\n│   ├── routes.ts         # API routes\n│   ├── storage.ts        # Data access layer\n│   └── index.ts          # Server entry\n│\n├── shared/               # Shared TypeScript code\n│   └── schema.ts        # Database schema and types\n│\n├── docs/                # Documentation\n│   ├── architecture.md\n│   ├── api_endpoints.md\n│   ├── setup_guide.md\n│   └── roadmap.md\n│\n└── package.json         # Dependencies and scripts\n```\n\n## Development Workflow\n\n### Adding New Features\n\n1. **Define Schema** (`shared/schema.ts`)\n   ```typescript\n   export const myTable = pgTable(\"my_table\", {\n     // ... columns\n   });\n   ```\n\n2. **Update Storage** (`server/storage.ts`)\n   ```typescript\n   async getMyData(userId: string): Promise<MyData[]> {\n     // ... implementation\n   }\n   ```\n\n3. **Add API Routes** (`server/routes.ts`)\n   ```typescript\n   app.get(\"/api/my-data\", requireAuth, async (req, res) => {\n     // ... implementation\n   });\n   ```\n\n4. **Build Frontend** (`client/src/pages/`)\n   ```tsx\n   const { data } = useQuery<MyData[]>({\n     queryKey: [\"/api/my-data\"],\n   });\n   ```\n\n5. **Push Schema Changes**\n   ```bash\n   npm run db:push\n   ```\n\n### Available Scripts\n\n- `npm run dev` - Start development server\n- `npm run build` - Build for production\n- `npm run db:push` - Push schema changes to database\n- `npm run db:studio` - Open Drizzle Studio (database GUI)\n\n## Troubleshooting\n\n### Database Connection Issues\n\nIf you encounter database connection errors:\n\n1. Verify `DATABASE_URL` is correctly set\n2. Ensure PostgreSQL is running\n3. Check network connectivity to database host\n4. Verify credentials are correct\n\n### Session Issues\n\nIf sessions aren't persisting:\n\n1. Verify `SESSION_SECRET` is set\n2. Check that session store is properly configured\n3. Ensure cookies are enabled in browser\n\n### Build Errors\n\nIf the build fails:\n\n1. Clear `node_modules` and reinstall:\n   ```bash\n   rm -rf node_modules\n   npm install\n   ```\n\n2. Clear build cache:\n   ```bash\n   rm -rf dist\n   npm run build\n   ```\n\n### Schema Sync Issues\n\nIf database schema is out of sync:\n\n1. Use force push:\n   ```bash\n   npm run db:push --force\n   ```\n\n2. Or manually verify schema in Drizzle Studio:\n   ```bash\n   npm run db:studio\n   ```\n\n## Security Notes\n\n### Production Deployment\n\n1. **Never commit `.env` file** - It contains sensitive credentials\n2. **Use strong SESSION_SECRET** - Generate a cryptographically random string\n3. **Enable HTTPS** - Always use secure connections in production\n4. **Update dependencies** - Regularly update packages for security patches\n5. **Implement rate limiting** - Protect against brute force attacks\n\n### Environment Variables\n\nRequired for production:\n- `DATABASE_URL` - PostgreSQL connection string\n- `SESSION_SECRET` - Session encryption key\n- `NODE_ENV=production` - Enable production optimizations\n\n## Next Steps\n\n1. **Create Your First User**: Use the registration form\n2. **Add Connections**: Track your professional relationships\n3. **Set Goals**: Define your objectives\n4. **Create Tasks**: Break down your goals into actionable items\n5. **Weekly Review**: Reflect on your progress every week\n\n## Getting Help\n\n- [GitHub Issues](https://github.com/your-username/opus-app/issues)\n- [Documentation](./architecture.md)\n- [API Reference](./api_endpoints.md)\n- [Roadmap](./roadmap.md)\n","size_bytes":5989},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/hooks/use-auth.tsx":{"content":"// Reference: javascript_auth_all_persistance blueprint\nimport { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { SafeUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SafeUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SafeUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SafeUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SafeUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SafeUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SafeUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2849},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/dashboard-page.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Target, CheckSquare, Users, TrendingUp, Calendar, Clock } from \"lucide-react\";\nimport { format, parseISO, differenceInDays } from \"date-fns\";\nimport type { Goal, Task, Connection } from \"@shared/schema\";\n\nexport default function DashboardPage() {\n  const { data: goals = [], isLoading: goalsLoading } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\"],\n  });\n\n  const { data: tasks = [], isLoading: tasksLoading } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: connections = [], isLoading: connectionsLoading } = useQuery<Connection[]>({\n    queryKey: [\"/api/connections\"],\n  });\n\n  const incompleteTasks = tasks.filter(t => t.status !== \"done\");\n  const upcomingTasks = incompleteTasks.filter(t => t.dueDate).slice(0, 5);\n  const activeGoals = goals.filter(g => g.progress < 100).slice(0, 3);\n  \n  const needsAttention = connections.filter(c => {\n    if (!c.lastTouch) return true;\n    const daysSince = differenceInDays(new Date(), parseISO(c.lastTouch));\n    return daysSince > 30;\n  }).slice(0, 3);\n\n  const completedTasks = tasks.filter(t => t.status === \"done\").length;\n  const avgGoalProgress = goals.length > 0 \n    ? Math.round(goals.reduce((sum, g) => sum + g.progress, 0) / goals.length) \n    : 0;\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight mb-2\" data-testid=\"text-dashboard-title\">\n          Dashboard\n        </h1>\n        <p className=\"text-muted-foreground\">Welcome back! Here's your overview.</p>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"hover-elevate\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Goals</CardTitle>\n            <Target className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-active-goals\">\n              {goalsLoading ? \"...\" : goals.filter(g => g.progress < 100).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {avgGoalProgress}% average progress\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Open Tasks</CardTitle>\n            <CheckSquare className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-open-tasks\">\n              {tasksLoading ? \"...\" : incompleteTasks.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {completedTasks} completed\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Connections</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-connections-count\">\n              {connectionsLoading ? \"...\" : connections.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {needsAttention.length} need attention\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"hover-elevate\">\n          <CardHeader className=\"flex flex-row items-center justify-between gap-2 space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Productivity</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\" data-testid=\"text-productivity\">\n              {tasksLoading ? \"...\" : `${completedTasks}/${tasks.length}`}\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Tasks completed\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Upcoming Tasks */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              Upcoming Tasks\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {tasksLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : upcomingTasks.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <CheckSquare className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>No upcoming tasks</p>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                {upcomingTasks.map((task) => (\n                  <div\n                    key={task.id}\n                    className=\"flex items-start justify-between gap-4 p-3 rounded-lg hover-elevate\"\n                    data-testid={`task-${task.id}`}\n                  >\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"font-medium truncate\">{task.title}</p>\n                      {task.description && (\n                        <p className=\"text-sm text-muted-foreground truncate\">{task.description}</p>\n                      )}\n                    </div>\n                    <div className=\"flex flex-col items-end gap-1\">\n                      {task.dueDate && (\n                        <span className=\"text-xs font-mono text-muted-foreground whitespace-nowrap\">\n                          {format(parseISO(task.dueDate), \"MMM d\")}\n                        </span>\n                      )}\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {task.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Goal Progress */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"h-5 w-5\" />\n              Goal Progress\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {goalsLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : activeGoals.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Target className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>No active goals</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {activeGoals.map((goal) => (\n                  <div key={goal.id} className=\"space-y-2\" data-testid={`goal-${goal.id}`}>\n                    <div className=\"flex items-start justify-between gap-4\">\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"font-medium truncate\">{goal.title}</p>\n                        {goal.targetDate && (\n                          <p className=\"text-xs font-mono text-muted-foreground\">\n                            Due: {format(parseISO(goal.targetDate), \"MMM d, yyyy\")}\n                          </p>\n                        )}\n                      </div>\n                      <span className=\"text-sm font-semibold\">{goal.progress}%</span>\n                    </div>\n                    <Progress value={goal.progress} className=\"h-2\" />\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Connection Reminders */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Clock className=\"h-5 w-5\" />\n              Connection Reminders\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {connectionsLoading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">Loading...</div>\n            ) : needsAttention.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <Users className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                <p>All connections are up to date!</p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {needsAttention.map((connection) => {\n                  const daysSince = connection.lastTouch \n                    ? differenceInDays(new Date(), parseISO(connection.lastTouch)) \n                    : null;\n                  \n                  return (\n                    <div\n                      key={connection.id}\n                      className=\"p-4 border rounded-lg hover-elevate\"\n                      data-testid={`connection-reminder-${connection.id}`}\n                    >\n                      <div className=\"flex items-start justify-between gap-2 mb-2\">\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium truncate\">{connection.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">{connection.relationship}</p>\n                        </div>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {daysSince ? `${daysSince}d ago` : \"Never\"}\n                        </Badge>\n                      </div>\n                      {connection.notes && (\n                        <p className=\"text-xs text-muted-foreground line-clamp-2\">{connection.notes}</p>\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10487},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, date } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\n// Connections table - track relationships and last contact\nexport const connections = pgTable(\"connections\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  relationship: text(\"relationship\").notNull(),\n  lastTouch: date(\"last_touch\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Goals table - track personal and professional goals\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  targetDate: date(\"target_date\"),\n  progress: integer(\"progress\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Tasks table - task management with goal association\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dueDate: date(\"due_date\"),\n  goalId: varchar(\"goal_id\").references(() => goals.id, { onDelete: \"set null\" }),\n  status: text(\"status\").notNull().default(\"todo\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Weekly Reviews table - reflection and planning\nexport const weeklyReviews = pgTable(\"weekly_reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  weekStart: date(\"week_start\").notNull(),\n  summary: text(\"summary\"),\n  wins: text(\"wins\"),\n  lessons: text(\"lessons\"),\n  nextSteps: text(\"next_steps\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  connections: many(connections),\n  goals: many(goals),\n  tasks: many(tasks),\n  weeklyReviews: many(weeklyReviews),\n}));\n\nexport const connectionsRelations = relations(connections, ({ one }) => ({\n  user: one(users, {\n    fields: [connections.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const goalsRelations = relations(goals, ({ one, many }) => ({\n  user: one(users, {\n    fields: [goals.userId],\n    references: [users.id],\n  }),\n  tasks: many(tasks),\n}));\n\nexport const tasksRelations = relations(tasks, ({ one }) => ({\n  user: one(users, {\n    fields: [tasks.userId],\n    references: [users.id],\n  }),\n  goal: one(goals, {\n    fields: [tasks.goalId],\n    references: [goals.id],\n  }),\n}));\n\nexport const weeklyReviewsRelations = relations(weeklyReviews, ({ one }) => ({\n  user: one(users, {\n    fields: [weeklyReviews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertConnectionSchema = createInsertSchema(connections).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertGoalSchema = createInsertSchema(goals).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\nexport const insertWeeklyReviewSchema = createInsertSchema(weeklyReviews).omit({\n  id: true,\n  userId: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type SafeUser = Omit<User, 'password'>;\n\nexport type InsertConnection = z.infer<typeof insertConnectionSchema>;\nexport type Connection = typeof connections.$inferSelect;\n\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\n\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\n\nexport type InsertWeeklyReview = z.infer<typeof insertWeeklyReviewSchema>;\nexport type WeeklyReview = typeof weeklyReviews.$inferSelect;\n","size_bytes":4635},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/pages/goals-page.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger, DialogFooter } from \"@/components/ui/dialog\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Target, Plus, Calendar, Pencil, Trash2, TrendingUp } from \"lucide-react\";\nimport { format, parseISO } from \"date-fns\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Goal, InsertGoal } from \"@shared/schema\";\n\nexport default function GoalsPage() {\n  const [isCreateOpen, setIsCreateOpen] = useState(false);\n  const [editingGoal, setEditingGoal] = useState<Goal | null>(null);\n  const [formData, setFormData] = useState<InsertGoal>({\n    title: \"\",\n    description: \"\",\n    targetDate: null,\n    progress: 0,\n  });\n\n  const { toast } = useToast();\n\n  const { data: goals = [], isLoading } = useQuery<Goal[]>({\n    queryKey: [\"/api/goals\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertGoal) => {\n      const res = await apiRequest(\"POST\", \"/api/goals\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      setIsCreateOpen(false);\n      resetForm();\n      toast({ title: \"Goal created successfully\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertGoal> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/goals/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      setEditingGoal(null);\n      resetForm();\n      toast({ title: \"Goal updated successfully\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/goals/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/goals\"] });\n      toast({ title: \"Goal deleted successfully\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      targetDate: null,\n      progress: 0,\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingGoal) {\n      updateMutation.mutate({ id: editingGoal.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const openEdit = (goal: Goal) => {\n    setEditingGoal(goal);\n    setFormData({\n      title: goal.title,\n      description: goal.description || \"\",\n      targetDate: goal.targetDate,\n      progress: goal.progress,\n    });\n  };\n\n  const activeGoals = goals.filter(g => g.progress < 100);\n  const completedGoals = goals.filter(g => g.progress >= 100);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl md:text-4xl font-bold tracking-tight mb-2\" data-testid=\"text-goals-title\">\n            Goals\n          </h1>\n          <p className=\"text-muted-foreground\">Track your personal and professional objectives</p>\n        </div>\n        <Dialog open={isCreateOpen} onOpenChange={setIsCreateOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-goal\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Goal\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Create New Goal</DialogTitle>\n              <DialogDescription>Set a new objective to work towards</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"title\">Title *</Label>\n                <Input\n                  id=\"title\"\n                  data-testid=\"input-goal-title\"\n                  value={formData.title}\n                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                  placeholder=\"e.g., Learn React\"\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  data-testid=\"input-goal-description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                  placeholder=\"Describe your goal...\"\n                  rows={3}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"targetDate\">Target Date</Label>\n                <Input\n                  id=\"targetDate\"\n                  data-testid=\"input-goal-target-date\"\n                  type=\"date\"\n                  value={formData.targetDate || \"\"}\n                  onChange={(e) => setFormData({ ...formData, targetDate: e.target.value || null })}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"progress\">Progress: {formData.progress}%</Label>\n                <Slider\n                  id=\"progress\"\n                  data-testid=\"slider-goal-progress\"\n                  value={[formData.progress]}\n                  onValueChange={([value]) => setFormData({ ...formData, progress: value })}\n                  max={100}\n                  step={5}\n                />\n              </div>\n              <DialogFooter>\n                <Button\n                  type=\"submit\"\n                  disabled={createMutation.isPending}\n                  data-testid=\"button-submit-goal\"\n                >\n                  Create Goal\n                </Button>\n              </DialogFooter>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingGoal} onOpenChange={(open) => !open && setEditingGoal(null)}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit Goal</DialogTitle>\n            <DialogDescription>Update goal details and progress</DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-title\">Title *</Label>\n              <Input\n                id=\"edit-title\"\n                data-testid=\"input-edit-goal-title\"\n                value={formData.title}\n                onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-description\">Description</Label>\n              <Textarea\n                id=\"edit-description\"\n                data-testid=\"input-edit-goal-description\"\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                rows={3}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-targetDate\">Target Date</Label>\n              <Input\n                id=\"edit-targetDate\"\n                data-testid=\"input-edit-goal-target-date\"\n                type=\"date\"\n                value={formData.targetDate || \"\"}\n                onChange={(e) => setFormData({ ...formData, targetDate: e.target.value || null })}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-progress\">Progress: {formData.progress}%</Label>\n              <Slider\n                id=\"edit-progress\"\n                data-testid=\"slider-edit-goal-progress\"\n                value={[formData.progress]}\n                onValueChange={([value]) => setFormData({ ...formData, progress: value })}\n                max={100}\n                step={5}\n              />\n            </div>\n            <DialogFooter>\n              <Button\n                type=\"submit\"\n                disabled={updateMutation.isPending}\n                data-testid=\"button-update-goal\"\n              >\n                Update Goal\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Active Goals */}\n      {isLoading ? (\n        <div className=\"text-center py-12 text-muted-foreground\">Loading goals...</div>\n      ) : goals.length === 0 ? (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Target className=\"h-16 w-16 text-muted-foreground mb-4 opacity-50\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No goals yet</h3>\n            <p className=\"text-muted-foreground mb-4\">Set your first goal to get started</p>\n            <Button onClick={() => setIsCreateOpen(true)} data-testid=\"button-create-first-goal\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Your First Goal\n            </Button>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-6\">\n          {activeGoals.length > 0 && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5\" />\n                Active Goals\n              </h2>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                {activeGoals.map((goal) => (\n                  <Card key={goal.id} className=\"hover-elevate\" data-testid={`goal-card-${goal.id}`}>\n                    <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"text-lg truncate\">{goal.title}</CardTitle>\n                        {goal.description && (\n                          <CardDescription className=\"line-clamp-2 mt-1\">{goal.description}</CardDescription>\n                        )}\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openEdit(goal)}\n                          data-testid={`button-edit-goal-${goal.id}`}\n                        >\n                          <Pencil className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(goal.id)}\n                          data-testid={`button-delete-goal-${goal.id}`}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Progress</span>\n                          <span className=\"font-semibold\">{goal.progress}%</span>\n                        </div>\n                        <Progress value={goal.progress} className=\"h-2\" />\n                      </div>\n                      {goal.targetDate && (\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>Target: {format(parseISO(goal.targetDate), \"MMM d, yyyy\")}</span>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {completedGoals.length > 0 && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                <Target className=\"h-5 w-5\" />\n                Completed Goals\n              </h2>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                {completedGoals.map((goal) => (\n                  <Card key={goal.id} className=\"hover-elevate opacity-75\" data-testid={`goal-card-completed-${goal.id}`}>\n                    <CardHeader className=\"flex flex-row items-start justify-between gap-2 space-y-0 pb-3\">\n                      <div className=\"flex-1 min-w-0\">\n                        <CardTitle className=\"text-lg truncate line-through decoration-muted-foreground\">\n                          {goal.title}\n                        </CardTitle>\n                        {goal.description && (\n                          <CardDescription className=\"line-clamp-2 mt-1\">{goal.description}</CardDescription>\n                        )}\n                      </div>\n                      <div className=\"flex gap-1\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => openEdit(goal)}\n                          data-testid={`button-edit-goal-completed-${goal.id}`}\n                        >\n                          <Pencil className=\"h-3 w-3\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => deleteMutation.mutate(goal.id)}\n                          data-testid={`button-delete-goal-completed-${goal.id}`}\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"space-y-2\">\n                        <Progress value={100} className=\"h-2\" />\n                      </div>\n                      {goal.targetDate && (\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span>Completed by {format(parseISO(goal.targetDate), \"MMM d, yyyy\")}</span>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":15037},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"server/auth.ts":{"content":"// Reference: javascript_auth_all_persistance blueprint\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === \"production\",\n      httpOnly: true,\n      sameSite: \"lax\",\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      ...req.body,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      // Sanitize response - remove password hash\n      const { password, ...safeUser } = user;\n      res.status(201).json(safeUser);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    // Sanitize response - remove password hash\n    const { password, ...safeUser } = req.user!;\n    res.status(200).json(safeUser);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    // Sanitize response - remove password hash\n    const { password, ...safeUser } = req.user!;\n    res.json(safeUser);\n  });\n}\n","size_bytes":3218},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        // Editorial semantic colors\n        ink: \"hsl(var(--ink) / <alpha-value>)\",\n        charcoal: \"hsl(var(--charcoal) / <alpha-value>)\",\n        graphite: \"hsl(var(--graphite) / <alpha-value>)\",\n        stone: \"hsl(var(--stone) / <alpha-value>)\",\n        fog: \"hsl(var(--fog) / <alpha-value>)\",\n        pearl: \"hsl(var(--pearl) / <alpha-value>)\",\n        alabaster: \"hsl(var(--alabaster) / <alpha-value>)\",\n        ivory: \"hsl(var(--ivory) / <alpha-value>)\",\n        pure: \"hsl(var(--pure) / <alpha-value>)\",\n        forest: \"hsl(var(--forest) / <alpha-value>)\",\n        sage: \"hsl(var(--sage) / <alpha-value>)\",\n        rust: \"hsl(var(--rust) / <alpha-value>)\",\n        sand: \"hsl(var(--sand) / <alpha-value>)\",\n        ocean: \"hsl(var(--ocean) / <alpha-value>)\",\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4821},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"server/lib/github.ts":{"content":"import { Octokit } from '@octokit/rest';\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=github',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  const accessToken = connectionSettings?.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n  if (!connectionSettings || !accessToken) {\n    throw new Error('GitHub not connected');\n  }\n  return accessToken;\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableGitHubClient() {\n  const accessToken = await getAccessToken();\n  return new Octokit({ auth: accessToken });\n}\n","size_bytes":1512},"scripts/commit-to-github.ts":{"content":"#!/usr/bin/env tsx\n/**\n * Script to commit all code and documentation to GitHub\n * Run with: tsx scripts/commit-to-github.ts\n */\n\nimport { getUncachableGitHubClient } from '../server/lib/github';\nimport { readFileSync, readdirSync, statSync } from 'fs';\nimport { join, relative } from 'path';\n\n// Files and directories to exclude\nconst EXCLUDE_PATTERNS = [\n  'node_modules',\n  '.git',\n  'dist',\n  '.replit',\n  '.config',\n  '.cache',\n  '.upm',\n  'replit.nix',\n  '.gitignore',\n  'package-lock.json',\n];\n\nfunction shouldExclude(path: string): boolean {\n  return EXCLUDE_PATTERNS.some(pattern => path.includes(pattern));\n}\n\nfunction getAllFiles(dirPath: string, arrayOfFiles: string[] = []): string[] {\n  const files = readdirSync(dirPath);\n\n  files.forEach((file) => {\n    const fullPath = join(dirPath, file);\n    \n    if (shouldExclude(fullPath)) {\n      return;\n    }\n\n    if (statSync(fullPath).isDirectory()) {\n      arrayOfFiles = getAllFiles(fullPath, arrayOfFiles);\n    } else {\n      arrayOfFiles.push(fullPath);\n    }\n  });\n\n  return arrayOfFiles;\n}\n\nasync function commitToGitHub() {\n  try {\n    const octokit = await getUncachableGitHubClient();\n    \n    // Get authenticated user\n    const { data: user } = await octokit.users.getAuthenticated();\n    console.log(`Authenticated as: ${user.login}`);\n    \n    // Get the repository name from the current directory\n    const repoName = process.env.REPL_SLUG || 'opus';\n    const owner = user.login;\n    \n    console.log(`\\nAttempting to work with repository: ${owner}/${repoName}`);\n    \n    // Check if repository exists, create if it doesn't\n    let repo;\n    try {\n      const { data } = await octokit.repos.get({\n        owner,\n        repo: repoName,\n      });\n      repo = data;\n      console.log(`Repository found: ${repo.full_name}`);\n    } catch (error: any) {\n      if (error.status === 404) {\n        console.log(`Repository not found. Creating new repository: ${repoName}`);\n        const { data } = await octokit.repos.createForAuthenticatedUser({\n          name: repoName,\n          description: 'Opus - Personal and Client Management App',\n          private: false,\n          auto_init: true,\n        });\n        repo = data;\n        console.log(`Repository created: ${repo.full_name}`);\n      } else {\n        throw error;\n      }\n    }\n    \n    // Get the latest commit SHA from the default branch\n    const { data: ref } = await octokit.git.getRef({\n      owner,\n      repo: repoName,\n      ref: `heads/${repo.default_branch}`,\n    });\n    \n    const latestCommitSha = ref.object.sha;\n    console.log(`Latest commit SHA: ${latestCommitSha}`);\n    \n    // Get the tree SHA from the latest commit\n    const { data: commit } = await octokit.git.getCommit({\n      owner,\n      repo: repoName,\n      commit_sha: latestCommitSha,\n    });\n    \n    // Get all files from the project\n    console.log('\\nCollecting project files...');\n    const projectRoot = process.cwd();\n    const allFiles = getAllFiles(projectRoot);\n    \n    // Create file objects with content\n    const files = allFiles.map(filePath => {\n      const relativePath = relative(projectRoot, filePath);\n      const content = readFileSync(filePath, 'utf-8');\n      return { path: relativePath, content };\n    });\n    \n    console.log(`Found ${files.length} files to commit`);\n    \n    // Add README if it doesn't exist\n    const hasReadme = files.some(f => f.path === 'README.md');\n    if (!hasReadme) {\n      files.push({\n        path: 'README.md',\n        content: `# Opus - Personal and Client Management App\n\nA full-stack productivity application for young professionals to manage their personal and professional lives.\n\n## Features\n- 🔐 Secure authentication with session management\n- 📊 Dashboard with metrics and overview\n- 👥 Connections management for professional relationships\n- 🎯 Goals tracking with progress indicators\n- ✅ Task management with priorities\n- 📝 Weekly review and reflection\n\n## Tech Stack\n- **Frontend**: React 18 + TypeScript + TailwindCSS + shadcn/ui\n- **Backend**: Express.js + TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Authentication**: Passport.js with session-based auth\n\n## Getting Started\n\\`\\`\\`bash\nnpm install\nnpm run dev\n\\`\\`\\`\n\n## Environment Variables\n- \\`DATABASE_URL\\`: PostgreSQL connection string\n- \\`SESSION_SECRET\\`: Secret for session encryption\n\nSee \\`replit.md\\` for complete documentation.\n`\n      });\n    }\n    \n    // Create blobs for each file\n    console.log('\\nUploading files to GitHub...');\n    const blobs = await Promise.all(\n      files.map(async (file, index) => {\n        if (index % 20 === 0) {\n          console.log(`  Processed ${index}/${files.length} files...`);\n        }\n        const { data: blob } = await octokit.git.createBlob({\n          owner,\n          repo: repoName,\n          content: Buffer.from(file.content).toString('base64'),\n          encoding: 'base64',\n        });\n        return { \n          path: file.path, \n          sha: blob.sha, \n          mode: '100644' as const, \n          type: 'blob' as const \n        };\n      })\n    );\n    \n    console.log(`  Processed ${files.length}/${files.length} files ✓`);\n    \n    // Create a new tree\n    console.log('\\nCreating commit tree...');\n    const { data: newTree } = await octokit.git.createTree({\n      owner,\n      repo: repoName,\n      tree: blobs,\n      base_tree: commit.tree.sha,\n    });\n    \n    // Create a new commit\n    const commitMessage = `🚀 Full codebase commit - ${new Date().toLocaleString()}\n\nIncludes all source code, configuration, and documentation`;\n    \n    const { data: newCommit } = await octokit.git.createCommit({\n      owner,\n      repo: repoName,\n      message: commitMessage,\n      tree: newTree.sha,\n      parents: [latestCommitSha],\n    });\n    \n    console.log(`New commit created: ${newCommit.sha}`);\n    \n    // Update the reference\n    await octokit.git.updateRef({\n      owner,\n      repo: repoName,\n      ref: `heads/${repo.default_branch}`,\n      sha: newCommit.sha,\n    });\n    \n    console.log(`\\n✅ Complete codebase committed successfully!`);\n    console.log(`📦 Files committed: ${files.length}`);\n    console.log(`🔗 View at: ${repo.html_url}`);\n    \n  } catch (error: any) {\n    console.error('❌ Error committing to GitHub:', error.message);\n    if (error.response) {\n      console.error('Response:', error.response.data);\n    }\n    process.exit(1);\n  }\n}\n\ncommitToGitHub();\n","size_bytes":6432}},"version":2}