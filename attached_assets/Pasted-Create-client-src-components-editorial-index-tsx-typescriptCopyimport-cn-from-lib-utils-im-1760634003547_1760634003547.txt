Create client/src/components/editorial/index.tsx:
typescriptCopyimport { cn } from "@/lib/utils";
import { motion, HTMLMotionProps } from "framer-motion";
import { forwardRef, ReactNode } from "react";

// Animation Variants
export const fadeInUp = {
  initial: { opacity: 0, y: 20 },
  animate: { opacity: 1, y: 0 },
  exit: { opacity: 0, y: -20 },
  transition: { duration: 0.5, ease: "easeOut" }
};

export const staggerContainer = {
  animate: {
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.3
    }
  }
};

// Editorial Heading Component
interface EditorialHeadingProps extends HTMLMotionProps<"h1"> {
  level?: 1 | 2 | 3 | 4;
  children: ReactNode;
  className?: string;
}

export const EditorialHeading = forwardRef<HTMLHeadingElement, EditorialHeadingProps>(
  ({ level = 1, children, className, ...props }, ref) => {
    const Tag = motion[`h${level}` as keyof typeof motion];
    const sizeClasses = {
      1: "editorial-heading-xl",
      2: "editorial-heading-lg", 
      3: "editorial-heading-md",
      4: "font-display text-2xl font-light"
    };
    
    return (
      <Tag
        ref={ref}
        className={cn(sizeClasses[level], className)}
        {...fadeInUp}
        {...props}
      >
        {children}
      </Tag>
    );
  }
);

// Editorial Label Component
export const EditorialLabel: React.FC<{ children: ReactNode; className?: string }> = ({ 
  children, 
  className 
}) => (
  <motion.p 
    className={cn("editorial-label", className)}
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    transition={{ duration: 0.3 }}
  >
    {children}
  </motion.p>
);

// Editorial Section Component
interface EditorialSectionProps {
  label?: string;
  title?: string;
  children: ReactNode;
  className?: string;
}

export const EditorialSection: React.FC<EditorialSectionProps> = ({
  label,
  title,
  children,
  className
}) => (
  <motion.section 
    className={cn("space-y-8", className)}
    variants={staggerContainer}
    initial="initial"
    animate="animate"
  >
    {label && <EditorialLabel>{label}</EditorialLabel>}
    {title && <EditorialHeading level={2}>{title}</EditorialHeading>}
    <motion.div variants={fadeInUp}>{children}</motion.div>
  </motion.section>
);

// Progress Indicator Component
interface ProgressIndicatorProps {
  value: number;
  max?: number;
  className?: string;
  showLabel?: boolean;
}

export const ProgressIndicator: React.FC<ProgressIndicatorProps> = ({
  value,
  max = 100,
  className,
  showLabel = false
}) => {
  const percentage = (value / max) * 100;
  
  return (
    <div className={cn("space-y-2", className)}>
      {showLabel && (
        <div className="flex justify-between text-sm">
          <span className="text-muted-foreground">Progress</span>
          <span className="text-foreground font-medium">{percentage.toFixed(0)}%</span>
        </div>
      )}
      <div className="progress-bar">
        <motion.div 
          className="progress-bar-fill"
          initial={{ width: 0 }}
          animate={{ width: `${percentage}%` }}
          transition={{ duration: 1, ease: "easeOut", delay: 0.2 }}
        />
      </div>
    </div>
  );
};

// Breathing Space Container
export const BreathingSpace: React.FC<{ children: ReactNode; className?: string }> = ({ 
  children, 
  className 
}) => (
  <div className={cn("breathing-space", className)}>
    {children}
  </div>
);