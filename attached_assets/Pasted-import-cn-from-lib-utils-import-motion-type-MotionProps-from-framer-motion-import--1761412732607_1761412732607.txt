import { cn } from "@/lib/utils";
import { motion, type MotionProps } from "framer-motion";
import { type ReactNode, forwardRef } from "react";

// Editorial Heading Component with Framer Motion
interface EditorialHeadingProps extends MotionProps {
  level?: 1 | 2 | 3 | 4;
  className?: string;
  children: ReactNode;
}

export const EditorialHeading = motion(
  forwardRef<HTMLHeadingElement, EditorialHeadingProps>(
    ({ level = 1, className, children, ...props }, ref) => {
      const Component = `h${level}` as keyof JSX.IntrinsicElements;
      const sizeClasses = {
        1: "editorial-heading-xl",
        2: "editorial-heading-lg",
        3: "editorial-heading-md",
        4: "text-editorial-xl font-display",
      };

      return (
        <Component
          ref={ref}
          className={cn(sizeClasses[level], className)}
          {...props}
        >
          {children}
        </Component>
      );
    }
  )
);

// Editorial Label Component
export const EditorialLabel = motion(
  forwardRef<HTMLParagraphElement, MotionProps & { className?: string; children: ReactNode }>(
    ({ className, children, ...props }, ref) => (
      <p ref={ref} className={cn("editorial-label", className)} {...props}>
        {children}
      </p>
    )
  )
);

// Editorial Text Component
export const EditorialText = motion(
  forwardRef<HTMLParagraphElement, MotionProps & { className?: string; children: ReactNode }>(
    ({ className, children, ...props }, ref) => (
      <p ref={ref} className={cn("editorial-body", className)} {...props}>
        {children}
      </p>
    )
  )
);

// Progress Line Component
interface ProgressLineProps {
  progress: number;
  className?: string;
  animated?: boolean;
}

export const ProgressLine = ({ progress, className, animated = true }: ProgressLineProps) => (
  <div className={cn("h-px bg-border relative overflow-hidden", className)}>
    <motion.div
      className="absolute left-0 top-0 h-full bg-foreground"
      initial={animated ? { width: 0 } : { width: `${progress}%` }}
      animate={{ width: `${progress}%` }}
      transition={{ duration: 1, ease: "easeInOut" }}
    />
  </div>
);

// Breathing Container
export const BreathingContainer = motion(
  forwardRef<HTMLDivElement, MotionProps & { className?: string; children: ReactNode }>(
    ({ className, children, ...props }, ref) => (
      <div ref={ref} className={cn("breathing-space", className)} {...props}>
        {children}
      </div>
    )
  )
);