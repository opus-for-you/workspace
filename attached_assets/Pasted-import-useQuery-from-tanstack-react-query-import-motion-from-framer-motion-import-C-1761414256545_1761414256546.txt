import { useQuery } from "@tanstack/react-query";
import { motion } from "framer-motion";
import { Calendar, TrendingUp, Clock, Target, Zap, BookOpen } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { EditorialHeading, EditorialLabel, EditorialText, ProgressLine, BreathingContainer } from "@/components/editorial";
import { format } from "date-fns";

const container = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
    },
  },
};

const item = {
  hidden: { opacity: 0, y: 20 },
  show: { opacity: 1, y: 0 },
};

export default function Dashboard() {
  const { data: user } = useQuery({
    queryKey: ["user"],
    queryFn: async () => {
      const response = await fetch("/api/user", { credentials: "include" });
      if (!response.ok) throw new Error("Failed to fetch user");
      return response.json();
    },
  });
  
  const { data: goals } = useQuery({
    queryKey: ["goals"],
    queryFn: async () => {
      const response = await fetch("/api/goals", { credentials: "include" });
      if (!response.ok) throw new Error("Failed to fetch goals");
      return response.json();
    },
  });
  
  const { data: tasks } = useQuery({
    queryKey: ["tasks", "week"],
    queryFn: async () => {
      const response = await fetch("/api/tasks/week", { credentials: "include" });
      if (!response.ok) throw new Error("Failed to fetch tasks");
      return response.json();
    },
  });
  
  return (
    <BreathingContainer>
      {/* Hero Section - North Star */}
      <motion.section 
        className="section-space"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <EditorialLabel className="mb-6">YOUR NORTH STAR</EditorialLabel>
        <EditorialHeading level={1} className="text-charcoal max-w-5xl mb-8">
          {user?.vision || "Build products that bridge human needs with technological possibility."}
        </EditorialHeading>
        
        <div className="flex flex-wrap gap-8 text-sm text-muted-foreground">
          <span className="flex items-center gap-2">
            <Calendar className="h-4 w-4" />
            Week {format(new Date(), "w")} of {format(new Date(), "yyyy")}
          </span>
          <span className="flex items-center gap-2">
            <TrendingUp className="h-4 w-4" />
            82% Aligned
          </span>
        </div>
      </motion.section>
      
      {/* Main Grid */}
      <motion.div 
        className="grid grid-cols-1 lg:grid-cols-3 gap-16"
        variants={container}
        initial="hidden"
        animate="show"
      >
        {/* Main Column */}
        <div className="lg:col-span-2 space-y-16">
          {/* This Week Section */}
          <motion.section variants={item}>
            <div className="flex justify-between items-baseline border-b border-pearl pb-4 mb-8">
              <h3 className="text-editorial-sm tracking-wider text-charcoal">THIS WEEK</h3>
              <span className="text-editorial-sm text-muted-foreground">
                {format(new Date(), "MMM d")}-{format(new Date(Date.now() + 6 * 24 * 60 * 60 * 1000), "d")}
              </span>
            </div>
            
            <div className="space-y-6">
              {tasks?.map((task: any, idx: number) => (
                <motion.div
                  key={task.id}
                  className="group cursor-pointer border-b border-pearl pb-6 hover:border-charcoal/20 transition-all duration-300"
                  whileHover={{ x: 4 }}
                >
                  <div className="flex items-start gap-6">
                    <span className="font-mono text-2xl font-light text-fog">
                      {String(idx + 1).padStart(2, "0")}
                    </span>
                    <div className="flex-1">
                      <h4 className="text-xl text-charcoal mb-2">{task.title}</h4>
                      <div className="flex flex-wrap gap-6 text-sm text-muted-foreground">
                        <span>{task.context || "Strategic Work"}</span>
                        <span className="text-fog">•</span>
                        <span className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {task.timing || "Flexible"}
                        </span>
                        {task.energy === "high" && (
                          <>
                            <span className="text-fog">•</span>
                            <span className="flex items-center gap-1 text-sage">
                              <Zap className="h-3 w-3" />
                              High Energy
                            </span>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
            
            <Button variant="ghost" className="mt-8 text-editorial-sm tracking-wider">
              <Target className="mr-2 h-4 w-4" />
              SET NEXT PRIORITY
            </Button>
          </motion.section>
          
          {/* Current Chapter */}
          <motion.section variants={item}>
            <h3 className="text-editorial-sm tracking-wider text-charcoal border-b border-pearl pb-4 mb-8">
              CURRENT CHAPTER
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-12">
              {[
                { metric: "82", unit: "DAYS", label: "Building thought leadership" },
                { metric: "14", unit: "CONNECTIONS", label: "Strategic relationships" },
                { metric: "3", unit: "MILESTONES", label: "Technical achievements" },
                { metric: "92", unit: "% ALIGNED", label: "With your vision" },
              ].map((stat, idx) => (
                <motion.div 
                  key={idx}
                  className="group cursor-pointer"
                  whileHover={{ scale: 1.02 }}
                >
                  <div className="flex items-baseline gap-2 mb-2">
                    <span className="font-display text-5xl font-light text-charcoal group-hover:text-sage-deep transition-colors">
                      {stat.metric}
                    </span>
                    <span className="text-editorial-xs text-muted-foreground">
                      {stat.unit}
                    </span>
                  </div>
                  <p className="text-sm text-muted-foreground">{stat.label}</p>
                </motion.div>
              ))}
            </div>
          </motion.section>
          
          {/* Active Goals */}
          <motion.section variants={item}>
            <div className="flex justify-between items-baseline border-b border-pearl pb-4 mb-8">
              <h3 className="text-editorial-sm tracking-wider text-charcoal">ACTIVE GOALS</h3>
              <Button variant="ghost" size="sm" className="text-editorial-xs tracking-wider">
                VIEW ALL
              </Button>
            </div>
            
            <div className="space-y-8">
              {goals?.slice(0, 3).map((goal: any) => (
                <Card key={goal.id} className="editorial-card p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <p className="editorial-label mb-2">{goal.category?.toUpperCase()}</p>
                      <h4 className="text-lg text-charcoal">{goal.title}</h4>
                    </div>
                    <span className="text-editorial-xs text-muted-foreground">
                      {goal.deadline ? format(new Date(goal.deadline), "MMM d") : "Ongoing"}
                    </span>
                  </div>
                  <ProgressLine progress={goal.progress || 0} />
                </Card>
              ))}
            </div>
          </motion.section>
        </div>
        
        {/* Sidebar */}
        <div className="space-y-12">
          {/* Weekly Reflection */}
          <motion.div variants={item}>
            <Card className="editorial-card p-6">
              <CardHeader className="p-0 mb-4">
                <CardTitle className="text-editorial-sm tracking-wider">WEEKLY REFLECTION</CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <EditorialText className="mb-6">
                  What patterns are emerging in your work? Take 10 minutes to capture insights.
                </EditorialText>
                <Button className="w-full text-editorial-sm tracking-wider">
                  <BookOpen className="mr-2 h-4 w-4" />
                  BEGIN
                </Button>
              </CardContent>
            </Card>
          </motion.div>
          
          {/* Energy Patterns */}
          <motion.div variants={item}>
            <h4 className="text-editorial-sm tracking-wider text-charcoal mb-6">
              ENERGY PATTERNS
            </h4>
            <div className="space-y-5">
              {[
                { label: "Peak Focus", time: "9-11 AM", level: 85 },
                { label: "Creative Flow", time: "2-4 PM", level: 70 },
                { label: "Strategic Thinking", time: "5-6 PM", level: 60 },
              ].map((pattern, idx) => (
                <div key={idx}>
                  <div className="flex justify-between text-sm mb-2">
                    <span className="text-muted-foreground">{pattern.label}</span>
                    <span className="text-charcoal">{pattern.time}</span>
                  </div>
                  <ProgressLine progress={pattern.level} animated />
                </div>
              ))}
            </div>
          </motion.div>
          
          {/* Upcoming */}
          <motion.div variants={item}>
            <h4 className="text-editorial-sm tracking-wider text-charcoal mb-6">
              NEXT WEEK
            </h4>
            <ul className="space-y-4">
              {["Product strategy session", "1:1 with Sarah Chen", "Technical review"].map(
                (item, idx) => (
                  <motion.li
                    key={idx}
                    className="flex items-center text-sm text-muted-foreground group cursor-pointer"
                    whileHover={{ x: 2 }}
                  >
                    <span className="mr-3 text-fog">—</span>
                    <span className="group-hover:text-charcoal transition-colors">{item}</span>
                  </motion.li>
                )
              )}
            </ul>
          </motion.div>
        </div>
      </motion.div>
    </BreathingContainer>
  );
}