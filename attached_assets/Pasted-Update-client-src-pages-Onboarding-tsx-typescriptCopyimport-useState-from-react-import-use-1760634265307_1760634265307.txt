Update client/src/pages/Onboarding.tsx:
typescriptCopyimport { useState } from "react";
import { useNavigate } from "wouter";
import { motion, AnimatePresence } from "framer-motion";
import { ArrowRight, ChevronLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { useMutation } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import {
  EditorialHeading,
  EditorialLabel,
  ProgressIndicator,
  fadeInUp,
} from "@/components/editorial";

const onboardingSchema = z.object({
  vision: z.string().min(20, "Tell us more about your vision"),
  strengths: z.string().min(20, "Share what energizes you"),
  direction: z.string().min(20, "Describe who you want to become"),
  obstacles: z.string().min(20, "What challenges are you facing?"),
});

type OnboardingFormData = z.infer<typeof onboardingSchema>;

const questions = [
  {
    id: "vision",
    category: "VISION",
    question: "What does meaningful work look like to you?",
    prompt: "Forget titles. Think impact.",
    placeholder: "I find meaning when I...",
    field: "vision" as const,
  },
  {
    id: "strengths",
    category: "ENERGY",
    question: "When do you lose track of time at work?",
    prompt: "These moments reveal your true strengths.",
    placeholder: "Time flies when I...",
    field: "strengths" as const,
  },
  {
    id: "direction",
    category: "DIRECTION",
    question: "Who do you want to become professionally?",
    prompt: "Not what. Who.",
    placeholder: "In five years, I see myself as someone who...",
    field: "direction" as const,
  },
  {
    id: "obstacles",
    category: "CLARITY",
    question: "What's holding you back right now?",
    prompt: "Name it to tame it.",
    placeholder: "The biggest challenge I face is...",
    field: "obstacles" as const,
  },
];

export default function Onboarding() {
  const [, navigate] = useNavigate();
  const [currentStep, setCurrentStep] = useState(0);
  const currentQuestion = questions[currentStep];
  
  const {
    register,
    handleSubmit,
    formState: { errors },
    trigger,
    getValues,
  } = useForm<OnboardingFormData>({
    resolver: zodResolver(onboardingSchema),
    mode: "onChange",
  });

  const saveOnboarding = useMutation({
    mutationFn: async (data: OnboardingFormData) => {
      const response = await fetch("/api/onboarding", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
      if (!response.ok) throw new Error("Failed to save onboarding");
      return response.json();
    },
    onSuccess: () => {
      navigate("/dashboard");
    },
  });

  const handleNext = async () => {
    const isValid = await trigger(currentQuestion.field);
    if (!isValid) return;

    if (currentStep < questions.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      handleSubmit((data) => saveOnboarding.mutate(data))();
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const progress = ((currentStep + 1) / questions.length) * 100;

  return (
    <motion.div 
      className="min-h-screen bg-ivory flex flex-col"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      {/* Progress Bar */}
      <div className="w-full">
        <ProgressIndicator value={progress} />
      </div>

      {/* Main Content */}
      <div className="flex-1 flex items-center justify-center p-8 md:p-16">
        <div className="w-full max-w-3xl">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              variants={fadeInUp}
              initial="initial"
              animate="animate"
              exit="exit"
            >
              {/* Category */}
              <EditorialLabel className="mb-8">
                {currentQuestion.category}
              </EditorialLabel>

              {/* Question */}
              <EditorialHeading level={1} className="mb-6">
                {currentQuestion.question}
              </EditorialHeading>

              {/* Prompt */}
              <motion.p
                className="text-lg text-graphite font-light mb-16"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.3 }}
              >
                {currentQuestion.prompt}
              </motion.p>

              {/* Input */}
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.4 }}
              >
                <Textarea
                  {...register(currentQuestion.field)}
                  className="min-h-[120px] bg-transparent border-0 border-b border-fog 
                           focus:border-charcoal text-lg resize-none rounded-none
                           placeholder:text-stone/50"
                  placeholder={currentQuestion.placeholder}
                />
                {errors[currentQuestion.field] && (
                  <p className="mt-2 text-sm text-rust">
                    {errors[currentQuestion.field]?.message}
                  </p>
                )}
              </motion.div>
            </motion.div>
          </AnimatePresence>

          {/* Navigation */}
          <motion.div
            className="flex justify-between items-center mt-24"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.5 }}
          >
            <Button
              variant="ghost"
              onClick={handleBack}
              disabled={currentStep === 0}
              className={cn(
                "flex items-center gap-2 text-sm tracking-wider",
                currentStep === 0 && "invisible"
              )}
            >
              <ChevronLeft className="w-4 h-4" />
              BACK
            </Button>

            <Button
              onClick={handleNext}
              disabled={saveOnboarding.isPending}
              className="group flex items-center gap-3 bg-charcoal hover:bg-ink
                       text-pure text-sm tracking-wider"
            >
              {currentStep === questions.length - 1 ? "BEGIN YOUR JOURNEY" : "CONTINUE"}
              <ArrowRight className="w-4 h-4 transition-transform group-hover:translate-x-1" />
            </Button>
          </motion.div>
        </div>
      </div>

      {/* Step Indicator */}
      <motion.div 
        className="text-center py-8"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
      >
        <p className="text-xs text-stone tracking-wider">
          {currentStep + 1} OF {questions.length}
        </p>
      </motion.div>
    </motion.div>
  );
}
